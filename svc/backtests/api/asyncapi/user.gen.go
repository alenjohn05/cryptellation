// Package "asyncapi" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version v0.39.0 DO NOT EDIT.
package asyncapi

import (
	"context"
	"fmt"

	"github.com/lerenn/asyncapi-codegen/pkg/extensions"

	"github.com/google/uuid"
)

// UserSubscriber contains all handlers that are listening messages for User
type UserSubscriber interface {
	// EventOperationReceived receive all Event messages from Events channel.
	EventOperationReceived(ctx context.Context, msg EventMessage) error
}

// UserController is the structure that provides sending capabilities to the
// developer and and connect the broker with the User
type UserController struct {
	controller
}

// NewUserController links the User to the broker
func NewUserController(bc extensions.BrokerController, options ...ControllerOption) (*UserController, error) {
	// Check if broker controller has been provided
	if bc == nil {
		return nil, extensions.ErrNilBrokerController
	}

	// Create default controller
	controller := controller{
		broker:        bc,
		subscriptions: make(map[string]extensions.BrokerChannelSubscription),
		logger:        extensions.DummyLogger{},
		middlewares:   make([]extensions.Middleware, 0),
		errorHandler:  extensions.DefaultErrorHandler(),
	}

	// Apply options
	for _, option := range options {
		option(&controller)
	}

	return &UserController{controller: controller}, nil
}

func (c UserController) wrapMiddlewares(
	middlewares []extensions.Middleware,
	callback extensions.NextMiddleware,
) func(ctx context.Context, msg *extensions.BrokerMessage) error {
	var called bool

	// If there is no more middleware
	if len(middlewares) == 0 {
		return func(ctx context.Context, msg *extensions.BrokerMessage) error {
			// Call the callback if it exists and it has not been called already
			if callback != nil && !called {
				called = true
				return callback(ctx)
			}

			// Nil can be returned, as the callback has already been called
			return nil
		}
	}

	// Get the next function to call from next middlewares or callback
	next := c.wrapMiddlewares(middlewares[1:], callback)

	// Wrap middleware into a check function that will call execute the middleware
	// and call the next wrapped middleware if the returned function has not been
	// called already
	return func(ctx context.Context, msg *extensions.BrokerMessage) error {
		// Call the middleware and the following if it has not been done already
		if !called {
			// Create the next call with the context and the message
			nextWithArgs := func(ctx context.Context) error {
				return next(ctx, msg)
			}

			// Call the middleware and register it as already called
			called = true
			if err := middlewares[0](ctx, msg, nextWithArgs); err != nil {
				return err
			}

			// If next has already been called in middleware, it should not be executed again
			return nextWithArgs(ctx)
		}

		// Nil can be returned, as the next middleware has already been called
		return nil
	}
}

func (c UserController) executeMiddlewares(ctx context.Context, msg *extensions.BrokerMessage, callback extensions.NextMiddleware) error {
	// Wrap middleware to have 'next' function when calling them
	wrapped := c.wrapMiddlewares(c.middlewares, callback)

	// Execute wrapped middlewares
	return wrapped(ctx, msg)
}

func addUserContextValues(ctx context.Context, addr string) context.Context {
	ctx = context.WithValue(ctx, extensions.ContextKeyIsVersion, "1.0.0")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsProvider, "user")
	return context.WithValue(ctx, extensions.ContextKeyIsChannel, addr)
}

// Close will clean up any existing resources on the controller
func (c *UserController) Close(ctx context.Context) {
	// Unsubscribing remaining channels
	c.UnsubscribeFromAllChannels(ctx)

	c.logger.Info(ctx, "Closed user controller")
}

// SubscribeToAllChannels will receive messages from channels where channel has
// no parameter on which the app is expecting messages. For channels with parameters,
// they should be subscribed independently.
func (c *UserController) SubscribeToAllChannels(ctx context.Context, as UserSubscriber) error {
	if as == nil {
		return extensions.ErrNilUserSubscriber
	}

	return nil
}

// UnsubscribeFromAllChannels will stop the subscription of all remaining subscribed channels
func (c *UserController) UnsubscribeFromAllChannels(ctx context.Context) {
}

// SubscribeToEventOperation will receive Event messages from Events channel.
//
// Callback function 'fn' will be called each time a new message is received.
//
// NOTE: for now, this only support the first message from AsyncAPI list.
//
// NOTE: for now, this only support the first message from AsyncAPI list.
// If you need support for other messages, please raise an issue.
func (c *UserController) SubscribeToEventOperation(
	ctx context.Context,
	params EventsChannelParameters,
	fn func(ctx context.Context, msg EventMessage) error,
) error {
	// Get channel address
	addr := fmt.Sprintf("cryptellation.backtests.events.%s", params.Id)

	// Set context
	ctx = addUserContextValues(ctx, addr)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "reception")

	// Check if the controller is already subscribed
	_, exists := c.subscriptions[addr]
	if exists {
		err := fmt.Errorf("%w: controller is already subscribed on channel %q", extensions.ErrAlreadySubscribedChannel, addr)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, addr)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Asynchronously listen to new messages and pass them to app receiver
	go func() {
		for {
			// Wait for next message
			acknowledgeableBrokerMessage, open := <-sub.MessagesChannel()

			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then exit the function
			if !open && acknowledgeableBrokerMessage.IsUninitialized() {
				return
			}

			// Set broker message to context
			ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, acknowledgeableBrokerMessage.String())

			// Execute middlewares before handling the message
			if err := c.executeMiddlewares(ctx, &acknowledgeableBrokerMessage.BrokerMessage, func(ctx context.Context) error {
				// Process message
				msg, err := brokerMessageToEventMessage(acknowledgeableBrokerMessage.BrokerMessage)
				if err != nil {
					return err
				}

				// Execute the subscription function
				if err := fn(ctx, msg); err != nil {
					return err
				}

				acknowledgeableBrokerMessage.Ack()

				return nil
			}); err != nil {
				c.errorHandler(ctx, addr, &acknowledgeableBrokerMessage, err)
				// On error execute the acknowledgeableBrokerMessage nack() function and
				// let the BrokerAcknowledgment decide what is the right nack behavior for the broker
				acknowledgeableBrokerMessage.Nak()
			}
		}
	}()

	// Add the cancel channel to the inside map
	c.subscriptions[addr] = sub

	return nil
} // UnsubscribeFromEventOperation will stop the reception of Event messages from Events channel.
// A timeout can be set in context to avoid blocking operation, if needed.
func (c *UserController) UnsubscribeFromEventOperation(
	ctx context.Context,
	params EventsChannelParameters,
) {
	// Get channel address
	addr := fmt.Sprintf("cryptellation.backtests.events.%s", params.Id)

	// Check if there receivers for this channel
	sub, exists := c.subscriptions[addr]
	if !exists {
		return
	}

	// Set context
	ctx = addUserContextValues(ctx, addr)

	// Stop the subscription
	sub.Cancel(ctx)

	// Remove if from the receivers
	delete(c.subscriptions, addr)

	c.logger.Info(ctx, "Unsubscribed from channel")
}

// SendToAccountsListOperation will send a AccountsListRequest message on AccountsListRequest channel.
//
// NOTE: this won't wait for reply, use the normal version to get the reply or do the catching reply manually.
// NOTE: for now, this only support the first message from AsyncAPI list.
// If you need support for other messages, please raise an issue.
func (c *UserController) SendToAccountsListOperation(
	ctx context.Context,
	msg AccountsListRequestMessage,
) error {
	// Set channel address
	addr := "cryptellation.backtests.accounts.list"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addUserContextValues(ctx, addr)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Send the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, addr, brokerMsg)
	})
}

// RequestToAccountsListOperation will send a AccountsListRequest message on AccountsListRequest channel
// and wait for a AccountsListResponse message from AccountsListResponse channel.
//
// If a correlation ID is set in the AsyncAPI, then this will wait for the
// reply with the same correlation ID. Otherwise, it will returns the first
// message on the reply channel.
//
// A timeout can be set in context to avoid blocking operation, if needed.

func (c *UserController) RequestToAccountsListOperation(
	ctx context.Context,
	msg AccountsListRequestMessage,
) (AccountsListResponseMessage, error) {
	// Get receiving channel address
	addr := msg.Headers.ReplyTo

	// Set context
	ctx = addUserContextValues(ctx, addr)

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, addr)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return AccountsListResponseMessage{}, err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Close receiver on leave
	defer func() {
		// Stop the subscription
		sub.Cancel(ctx)

		// Logging unsubscribing
		c.logger.Info(ctx, "Unsubscribed from channel")
	}()

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Send the message
	if err := c.SendToAccountsListOperation(ctx, msg); err != nil {
		c.logger.Error(ctx, "error happened when sending message", extensions.LogInfo{Key: "error", Value: err.Error()})
		return AccountsListResponseMessage{}, fmt.Errorf("error happened when sending message: %w", err)
	}

	// Wait for corresponding response
	for {
		select {
		case acknowledgeableBrokerMessage, open := <-sub.MessagesChannel():
			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then the subscription ended before
			// receiving the expected message
			if !open && acknowledgeableBrokerMessage.IsUninitialized() {
				c.logger.Error(ctx, "Channel closed before getting message")
				return AccountsListResponseMessage{}, extensions.ErrSubscriptionCanceled
			}

			// Get new message
			rmsg, err := brokerMessageToAccountsListResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
			if err != nil {
				c.logger.Error(ctx, err.Error())
			}

			acknowledgeableBrokerMessage.Ack()

			// If message doesn't have corresponding correlation ID, then ingore and continue
			if msg.CorrelationID() != rmsg.CorrelationID() {
				continue
			}

			// Set context with received values as it is the expected message
			msgCtx := context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, acknowledgeableBrokerMessage.String())
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsDirection, "reception")
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

			// Execute middlewares before returning
			if err := c.executeMiddlewares(msgCtx, &acknowledgeableBrokerMessage.BrokerMessage, nil); err != nil {
				return AccountsListResponseMessage{}, err
			}

			// Return the message to the caller
			//
			// NOTE: it is transformed from the broker again, as it could have
			// been modified by middlewares
			return brokerMessageToAccountsListResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
		case <-ctx.Done(): // Set corrsponding error if context is done
			c.logger.Error(ctx, "Context done before getting message")
			return AccountsListResponseMessage{}, extensions.ErrContextCanceled
		}
	}
}

// SendToAdvanceOperation will send a AdvanceRequest message on AdvanceRequest channel.
//
// NOTE: this won't wait for reply, use the normal version to get the reply or do the catching reply manually.
// NOTE: for now, this only support the first message from AsyncAPI list.
// If you need support for other messages, please raise an issue.
func (c *UserController) SendToAdvanceOperation(
	ctx context.Context,
	msg AdvanceRequestMessage,
) error {
	// Set channel address
	addr := "cryptellation.backtests.advance"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addUserContextValues(ctx, addr)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Send the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, addr, brokerMsg)
	})
}

// RequestToAdvanceOperation will send a AdvanceRequest message on AdvanceRequest channel
// and wait for a AdvanceResponse message from AdvanceResponse channel.
//
// If a correlation ID is set in the AsyncAPI, then this will wait for the
// reply with the same correlation ID. Otherwise, it will returns the first
// message on the reply channel.
//
// A timeout can be set in context to avoid blocking operation, if needed.

func (c *UserController) RequestToAdvanceOperation(
	ctx context.Context,
	msg AdvanceRequestMessage,
) (AdvanceResponseMessage, error) {
	// Get receiving channel address
	addr := msg.Headers.ReplyTo

	// Set context
	ctx = addUserContextValues(ctx, addr)

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, addr)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return AdvanceResponseMessage{}, err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Close receiver on leave
	defer func() {
		// Stop the subscription
		sub.Cancel(ctx)

		// Logging unsubscribing
		c.logger.Info(ctx, "Unsubscribed from channel")
	}()

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Send the message
	if err := c.SendToAdvanceOperation(ctx, msg); err != nil {
		c.logger.Error(ctx, "error happened when sending message", extensions.LogInfo{Key: "error", Value: err.Error()})
		return AdvanceResponseMessage{}, fmt.Errorf("error happened when sending message: %w", err)
	}

	// Wait for corresponding response
	for {
		select {
		case acknowledgeableBrokerMessage, open := <-sub.MessagesChannel():
			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then the subscription ended before
			// receiving the expected message
			if !open && acknowledgeableBrokerMessage.IsUninitialized() {
				c.logger.Error(ctx, "Channel closed before getting message")
				return AdvanceResponseMessage{}, extensions.ErrSubscriptionCanceled
			}

			// Get new message
			rmsg, err := brokerMessageToAdvanceResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
			if err != nil {
				c.logger.Error(ctx, err.Error())
			}

			acknowledgeableBrokerMessage.Ack()

			// If message doesn't have corresponding correlation ID, then ingore and continue
			if msg.CorrelationID() != rmsg.CorrelationID() {
				continue
			}

			// Set context with received values as it is the expected message
			msgCtx := context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, acknowledgeableBrokerMessage.String())
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsDirection, "reception")
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

			// Execute middlewares before returning
			if err := c.executeMiddlewares(msgCtx, &acknowledgeableBrokerMessage.BrokerMessage, nil); err != nil {
				return AdvanceResponseMessage{}, err
			}

			// Return the message to the caller
			//
			// NOTE: it is transformed from the broker again, as it could have
			// been modified by middlewares
			return brokerMessageToAdvanceResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
		case <-ctx.Done(): // Set corrsponding error if context is done
			c.logger.Error(ctx, "Context done before getting message")
			return AdvanceResponseMessage{}, extensions.ErrContextCanceled
		}
	}
}

// SendToCreateOperation will send a CreateRequest message on CreateRequest channel.
//
// NOTE: this won't wait for reply, use the normal version to get the reply or do the catching reply manually.
// NOTE: for now, this only support the first message from AsyncAPI list.
// If you need support for other messages, please raise an issue.
func (c *UserController) SendToCreateOperation(
	ctx context.Context,
	msg CreateRequestMessage,
) error {
	// Set channel address
	addr := "cryptellation.backtests.create"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addUserContextValues(ctx, addr)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Send the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, addr, brokerMsg)
	})
}

// RequestToCreateOperation will send a CreateRequest message on CreateRequest channel
// and wait for a CreateResponse message from CreateResponse channel.
//
// If a correlation ID is set in the AsyncAPI, then this will wait for the
// reply with the same correlation ID. Otherwise, it will returns the first
// message on the reply channel.
//
// A timeout can be set in context to avoid blocking operation, if needed.

func (c *UserController) RequestToCreateOperation(
	ctx context.Context,
	msg CreateRequestMessage,
) (CreateResponseMessage, error) {
	// Get receiving channel address
	addr := msg.Headers.ReplyTo

	// Set context
	ctx = addUserContextValues(ctx, addr)

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, addr)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return CreateResponseMessage{}, err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Close receiver on leave
	defer func() {
		// Stop the subscription
		sub.Cancel(ctx)

		// Logging unsubscribing
		c.logger.Info(ctx, "Unsubscribed from channel")
	}()

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Send the message
	if err := c.SendToCreateOperation(ctx, msg); err != nil {
		c.logger.Error(ctx, "error happened when sending message", extensions.LogInfo{Key: "error", Value: err.Error()})
		return CreateResponseMessage{}, fmt.Errorf("error happened when sending message: %w", err)
	}

	// Wait for corresponding response
	for {
		select {
		case acknowledgeableBrokerMessage, open := <-sub.MessagesChannel():
			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then the subscription ended before
			// receiving the expected message
			if !open && acknowledgeableBrokerMessage.IsUninitialized() {
				c.logger.Error(ctx, "Channel closed before getting message")
				return CreateResponseMessage{}, extensions.ErrSubscriptionCanceled
			}

			// Get new message
			rmsg, err := brokerMessageToCreateResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
			if err != nil {
				c.logger.Error(ctx, err.Error())
			}

			acknowledgeableBrokerMessage.Ack()

			// If message doesn't have corresponding correlation ID, then ingore and continue
			if msg.CorrelationID() != rmsg.CorrelationID() {
				continue
			}

			// Set context with received values as it is the expected message
			msgCtx := context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, acknowledgeableBrokerMessage.String())
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsDirection, "reception")
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

			// Execute middlewares before returning
			if err := c.executeMiddlewares(msgCtx, &acknowledgeableBrokerMessage.BrokerMessage, nil); err != nil {
				return CreateResponseMessage{}, err
			}

			// Return the message to the caller
			//
			// NOTE: it is transformed from the broker again, as it could have
			// been modified by middlewares
			return brokerMessageToCreateResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
		case <-ctx.Done(): // Set corrsponding error if context is done
			c.logger.Error(ctx, "Context done before getting message")
			return CreateResponseMessage{}, extensions.ErrContextCanceled
		}
	}
}

// SendToOrdersCreateOperation will send a OrdersCreateRequest message on OrdersCreateRequest channel.
//
// NOTE: this won't wait for reply, use the normal version to get the reply or do the catching reply manually.
// NOTE: for now, this only support the first message from AsyncAPI list.
// If you need support for other messages, please raise an issue.
func (c *UserController) SendToOrdersCreateOperation(
	ctx context.Context,
	msg OrdersCreateRequestMessage,
) error {
	// Set channel address
	addr := "cryptellation.backtests.orders.create"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addUserContextValues(ctx, addr)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Send the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, addr, brokerMsg)
	})
}

// RequestToOrdersCreateOperation will send a OrdersCreateRequest message on OrdersCreateRequest channel
// and wait for a OrdersCreateResponse message from OrdersCreateResponse channel.
//
// If a correlation ID is set in the AsyncAPI, then this will wait for the
// reply with the same correlation ID. Otherwise, it will returns the first
// message on the reply channel.
//
// A timeout can be set in context to avoid blocking operation, if needed.

func (c *UserController) RequestToOrdersCreateOperation(
	ctx context.Context,
	msg OrdersCreateRequestMessage,
) (OrdersCreateResponseMessage, error) {
	// Get receiving channel address
	addr := msg.Headers.ReplyTo

	// Set context
	ctx = addUserContextValues(ctx, addr)

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, addr)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return OrdersCreateResponseMessage{}, err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Close receiver on leave
	defer func() {
		// Stop the subscription
		sub.Cancel(ctx)

		// Logging unsubscribing
		c.logger.Info(ctx, "Unsubscribed from channel")
	}()

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Send the message
	if err := c.SendToOrdersCreateOperation(ctx, msg); err != nil {
		c.logger.Error(ctx, "error happened when sending message", extensions.LogInfo{Key: "error", Value: err.Error()})
		return OrdersCreateResponseMessage{}, fmt.Errorf("error happened when sending message: %w", err)
	}

	// Wait for corresponding response
	for {
		select {
		case acknowledgeableBrokerMessage, open := <-sub.MessagesChannel():
			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then the subscription ended before
			// receiving the expected message
			if !open && acknowledgeableBrokerMessage.IsUninitialized() {
				c.logger.Error(ctx, "Channel closed before getting message")
				return OrdersCreateResponseMessage{}, extensions.ErrSubscriptionCanceled
			}

			// Get new message
			rmsg, err := brokerMessageToOrdersCreateResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
			if err != nil {
				c.logger.Error(ctx, err.Error())
			}

			acknowledgeableBrokerMessage.Ack()

			// If message doesn't have corresponding correlation ID, then ingore and continue
			if msg.CorrelationID() != rmsg.CorrelationID() {
				continue
			}

			// Set context with received values as it is the expected message
			msgCtx := context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, acknowledgeableBrokerMessage.String())
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsDirection, "reception")
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

			// Execute middlewares before returning
			if err := c.executeMiddlewares(msgCtx, &acknowledgeableBrokerMessage.BrokerMessage, nil); err != nil {
				return OrdersCreateResponseMessage{}, err
			}

			// Return the message to the caller
			//
			// NOTE: it is transformed from the broker again, as it could have
			// been modified by middlewares
			return brokerMessageToOrdersCreateResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
		case <-ctx.Done(): // Set corrsponding error if context is done
			c.logger.Error(ctx, "Context done before getting message")
			return OrdersCreateResponseMessage{}, extensions.ErrContextCanceled
		}
	}
}

// SendToOrdersListOperation will send a OrdersListRequest message on OrdersListRequest channel.
//
// NOTE: this won't wait for reply, use the normal version to get the reply or do the catching reply manually.
// NOTE: for now, this only support the first message from AsyncAPI list.
// If you need support for other messages, please raise an issue.
func (c *UserController) SendToOrdersListOperation(
	ctx context.Context,
	msg OrdersListRequestMessage,
) error {
	// Set channel address
	addr := "cryptellation.backtests.orders.list"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addUserContextValues(ctx, addr)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Send the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, addr, brokerMsg)
	})
}

// RequestToOrdersListOperation will send a OrdersListRequest message on OrdersListRequest channel
// and wait for a OrdersListResponse message from OrdersListResponse channel.
//
// If a correlation ID is set in the AsyncAPI, then this will wait for the
// reply with the same correlation ID. Otherwise, it will returns the first
// message on the reply channel.
//
// A timeout can be set in context to avoid blocking operation, if needed.

func (c *UserController) RequestToOrdersListOperation(
	ctx context.Context,
	msg OrdersListRequestMessage,
) (OrdersListResponseMessage, error) {
	// Get receiving channel address
	addr := msg.Headers.ReplyTo

	// Set context
	ctx = addUserContextValues(ctx, addr)

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, addr)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return OrdersListResponseMessage{}, err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Close receiver on leave
	defer func() {
		// Stop the subscription
		sub.Cancel(ctx)

		// Logging unsubscribing
		c.logger.Info(ctx, "Unsubscribed from channel")
	}()

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Send the message
	if err := c.SendToOrdersListOperation(ctx, msg); err != nil {
		c.logger.Error(ctx, "error happened when sending message", extensions.LogInfo{Key: "error", Value: err.Error()})
		return OrdersListResponseMessage{}, fmt.Errorf("error happened when sending message: %w", err)
	}

	// Wait for corresponding response
	for {
		select {
		case acknowledgeableBrokerMessage, open := <-sub.MessagesChannel():
			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then the subscription ended before
			// receiving the expected message
			if !open && acknowledgeableBrokerMessage.IsUninitialized() {
				c.logger.Error(ctx, "Channel closed before getting message")
				return OrdersListResponseMessage{}, extensions.ErrSubscriptionCanceled
			}

			// Get new message
			rmsg, err := brokerMessageToOrdersListResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
			if err != nil {
				c.logger.Error(ctx, err.Error())
			}

			acknowledgeableBrokerMessage.Ack()

			// If message doesn't have corresponding correlation ID, then ingore and continue
			if msg.CorrelationID() != rmsg.CorrelationID() {
				continue
			}

			// Set context with received values as it is the expected message
			msgCtx := context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, acknowledgeableBrokerMessage.String())
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsDirection, "reception")
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

			// Execute middlewares before returning
			if err := c.executeMiddlewares(msgCtx, &acknowledgeableBrokerMessage.BrokerMessage, nil); err != nil {
				return OrdersListResponseMessage{}, err
			}

			// Return the message to the caller
			//
			// NOTE: it is transformed from the broker again, as it could have
			// been modified by middlewares
			return brokerMessageToOrdersListResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
		case <-ctx.Done(): // Set corrsponding error if context is done
			c.logger.Error(ctx, "Context done before getting message")
			return OrdersListResponseMessage{}, extensions.ErrContextCanceled
		}
	}
}

// SendToServiceInfoOperation will send a ServiceInfoRequest message on ServiceInfoRequest channel.
//
// NOTE: this won't wait for reply, use the normal version to get the reply or do the catching reply manually.
// NOTE: for now, this only support the first message from AsyncAPI list.
// If you need support for other messages, please raise an issue.
func (c *UserController) SendToServiceInfoOperation(
	ctx context.Context,
	msg ServiceInfoRequestMessage,
) error {
	// Set channel address
	addr := "cryptellation.backtests.info"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addUserContextValues(ctx, addr)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Send the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, addr, brokerMsg)
	})
}

// RequestToServiceInfoOperation will send a ServiceInfoRequest message on ServiceInfoRequest channel
// and wait for a ServiceInfoResponse message from ServiceInfoResponse channel.
//
// If a correlation ID is set in the AsyncAPI, then this will wait for the
// reply with the same correlation ID. Otherwise, it will returns the first
// message on the reply channel.
//
// A timeout can be set in context to avoid blocking operation, if needed.

func (c *UserController) RequestToServiceInfoOperation(
	ctx context.Context,
	msg ServiceInfoRequestMessage,
) (ServiceInfoResponseMessage, error) {
	// Get receiving channel address
	addr := msg.Headers.ReplyTo

	// Set context
	ctx = addUserContextValues(ctx, addr)

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, addr)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return ServiceInfoResponseMessage{}, err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Close receiver on leave
	defer func() {
		// Stop the subscription
		sub.Cancel(ctx)

		// Logging unsubscribing
		c.logger.Info(ctx, "Unsubscribed from channel")
	}()

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Send the message
	if err := c.SendToServiceInfoOperation(ctx, msg); err != nil {
		c.logger.Error(ctx, "error happened when sending message", extensions.LogInfo{Key: "error", Value: err.Error()})
		return ServiceInfoResponseMessage{}, fmt.Errorf("error happened when sending message: %w", err)
	}

	// Wait for corresponding response
	for {
		select {
		case acknowledgeableBrokerMessage, open := <-sub.MessagesChannel():
			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then the subscription ended before
			// receiving the expected message
			if !open && acknowledgeableBrokerMessage.IsUninitialized() {
				c.logger.Error(ctx, "Channel closed before getting message")
				return ServiceInfoResponseMessage{}, extensions.ErrSubscriptionCanceled
			}

			// Get new message
			rmsg, err := brokerMessageToServiceInfoResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
			if err != nil {
				c.logger.Error(ctx, err.Error())
			}

			acknowledgeableBrokerMessage.Ack()

			// If message doesn't have corresponding correlation ID, then ingore and continue
			if msg.CorrelationID() != rmsg.CorrelationID() {
				continue
			}

			// Set context with received values as it is the expected message
			msgCtx := context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, acknowledgeableBrokerMessage.String())
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsDirection, "reception")
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

			// Execute middlewares before returning
			if err := c.executeMiddlewares(msgCtx, &acknowledgeableBrokerMessage.BrokerMessage, nil); err != nil {
				return ServiceInfoResponseMessage{}, err
			}

			// Return the message to the caller
			//
			// NOTE: it is transformed from the broker again, as it could have
			// been modified by middlewares
			return brokerMessageToServiceInfoResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
		case <-ctx.Done(): // Set corrsponding error if context is done
			c.logger.Error(ctx, "Context done before getting message")
			return ServiceInfoResponseMessage{}, extensions.ErrContextCanceled
		}
	}
}

// SendToSubscribeOperation will send a SubscribeRequest message on SubscribeRequest channel.
//
// NOTE: this won't wait for reply, use the normal version to get the reply or do the catching reply manually.
// NOTE: for now, this only support the first message from AsyncAPI list.
// If you need support for other messages, please raise an issue.
func (c *UserController) SendToSubscribeOperation(
	ctx context.Context,
	msg SubscribeRequestMessage,
) error {
	// Set channel address
	addr := "cryptellation.backtests.subscribe"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addUserContextValues(ctx, addr)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Send the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, addr, brokerMsg)
	})
}

// RequestToSubscribeOperation will send a SubscribeRequest message on SubscribeRequest channel
// and wait for a SubscribeResponse message from SubscribeResponse channel.
//
// If a correlation ID is set in the AsyncAPI, then this will wait for the
// reply with the same correlation ID. Otherwise, it will returns the first
// message on the reply channel.
//
// A timeout can be set in context to avoid blocking operation, if needed.

func (c *UserController) RequestToSubscribeOperation(
	ctx context.Context,
	msg SubscribeRequestMessage,
) (SubscribeResponseMessage, error) {
	// Get receiving channel address
	addr := msg.Headers.ReplyTo

	// Set context
	ctx = addUserContextValues(ctx, addr)

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, addr)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return SubscribeResponseMessage{}, err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Close receiver on leave
	defer func() {
		// Stop the subscription
		sub.Cancel(ctx)

		// Logging unsubscribing
		c.logger.Info(ctx, "Unsubscribed from channel")
	}()

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Send the message
	if err := c.SendToSubscribeOperation(ctx, msg); err != nil {
		c.logger.Error(ctx, "error happened when sending message", extensions.LogInfo{Key: "error", Value: err.Error()})
		return SubscribeResponseMessage{}, fmt.Errorf("error happened when sending message: %w", err)
	}

	// Wait for corresponding response
	for {
		select {
		case acknowledgeableBrokerMessage, open := <-sub.MessagesChannel():
			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then the subscription ended before
			// receiving the expected message
			if !open && acknowledgeableBrokerMessage.IsUninitialized() {
				c.logger.Error(ctx, "Channel closed before getting message")
				return SubscribeResponseMessage{}, extensions.ErrSubscriptionCanceled
			}

			// Get new message
			rmsg, err := brokerMessageToSubscribeResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
			if err != nil {
				c.logger.Error(ctx, err.Error())
			}

			acknowledgeableBrokerMessage.Ack()

			// If message doesn't have corresponding correlation ID, then ingore and continue
			if msg.CorrelationID() != rmsg.CorrelationID() {
				continue
			}

			// Set context with received values as it is the expected message
			msgCtx := context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, acknowledgeableBrokerMessage.String())
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsDirection, "reception")
			msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

			// Execute middlewares before returning
			if err := c.executeMiddlewares(msgCtx, &acknowledgeableBrokerMessage.BrokerMessage, nil); err != nil {
				return SubscribeResponseMessage{}, err
			}

			// Return the message to the caller
			//
			// NOTE: it is transformed from the broker again, as it could have
			// been modified by middlewares
			return brokerMessageToSubscribeResponseMessage(acknowledgeableBrokerMessage.BrokerMessage)
		case <-ctx.Done(): // Set corrsponding error if context is done
			c.logger.Error(ctx, "Context done before getting message")
			return SubscribeResponseMessage{}, extensions.ErrContextCanceled
		}
	}
}
