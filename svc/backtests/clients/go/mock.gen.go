// Code generated by MockGen. DO NOT EDIT.
// Source: backtests.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	client "github.com/lerenn/cryptellation/pkg/client"
	account "github.com/lerenn/cryptellation/svc/backtests/pkg/account"
	event "github.com/lerenn/cryptellation/svc/backtests/pkg/event"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Advance mocks base method.
func (m *MockClient) Advance(ctx context.Context, backtestID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Advance", ctx, backtestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Advance indicates an expected call of Advance.
func (mr *MockClientMockRecorder) Advance(ctx, backtestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advance", reflect.TypeOf((*MockClient)(nil).Advance), ctx, backtestID)
}

// Close mocks base method.
func (m *MockClient) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), ctx)
}

// Create mocks base method.
func (m *MockClient) Create(ctx context.Context, payload BacktestCreationPayload) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, payload)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), ctx, payload)
}

// CreateOrder mocks base method.
func (m *MockClient) CreateOrder(ctx context.Context, payload OrderCreationPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockClientMockRecorder) CreateOrder(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockClient)(nil).CreateOrder), ctx, payload)
}

// GetAccounts mocks base method.
func (m *MockClient) GetAccounts(ctx context.Context, backtestID uuid.UUID) (map[string]account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, backtestID)
	ret0, _ := ret[0].(map[string]account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockClientMockRecorder) GetAccounts(ctx, backtestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockClient)(nil).GetAccounts), ctx, backtestID)
}

// ListenEvents mocks base method.
func (m *MockClient) ListenEvents(ctx context.Context, backtestID uuid.UUID) (<-chan event.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenEvents", ctx, backtestID)
	ret0, _ := ret[0].(<-chan event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenEvents indicates an expected call of ListenEvents.
func (mr *MockClientMockRecorder) ListenEvents(ctx, backtestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenEvents", reflect.TypeOf((*MockClient)(nil).ListenEvents), ctx, backtestID)
}

// ServiceInfo mocks base method.
func (m *MockClient) ServiceInfo(ctx context.Context) (client.ServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceInfo", ctx)
	ret0, _ := ret[0].(client.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceInfo indicates an expected call of ServiceInfo.
func (mr *MockClientMockRecorder) ServiceInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInfo", reflect.TypeOf((*MockClient)(nil).ServiceInfo), ctx)
}

// Subscribe mocks base method.
func (m *MockClient) Subscribe(ctx context.Context, backtestID uuid.UUID, exchange, pair string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, backtestID, exchange, pair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockClientMockRecorder) Subscribe(ctx, backtestID, exchange, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), ctx, backtestID, exchange, pair)
}
