// Package "asyncapi" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version v0.39.0 DO NOT EDIT.
package asyncapi

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/lerenn/asyncapi-codegen/pkg/extensions"

	"github.com/google/uuid"
)

// AsyncAPIVersion is the version of the used AsyncAPI document
const AsyncAPIVersion = "1.0.0"

// controller is the controller that will be used to communicate with the broker
// It will be used internally by AppController and UserController
type controller struct {
	// broker is the broker controller that will be used to communicate
	broker extensions.BrokerController
	// subscriptions is a map of all subscriptions
	subscriptions map[string]extensions.BrokerChannelSubscription
	// logger is the logger that will be usedÂ² to log operations on controller
	logger extensions.Logger
	// middlewares are the middlewares that will be executed when sending or
	// receiving messages
	middlewares []extensions.Middleware
	// handler to handle errors from consumers and middlewares
	errorHandler extensions.ErrorHandler
}

// ControllerOption is the type of the options that can be passed
// when creating a new Controller
type ControllerOption func(controller *controller)

// WithLogger attaches a logger to the controller
func WithLogger(logger extensions.Logger) ControllerOption {
	return func(controller *controller) {
		controller.logger = logger
	}
}

// WithMiddlewares attaches middlewares that will be executed when sending or receiving messages
func WithMiddlewares(middlewares ...extensions.Middleware) ControllerOption {
	return func(controller *controller) {
		controller.middlewares = middlewares
	}
}

// WithErrorHandler attaches a errorhandler to handle errors from subscriber functions
func WithErrorHandler(handler extensions.ErrorHandler) ControllerOption {
	return func(controller *controller) {
		controller.errorHandler = handler
	}
}

type MessageWithCorrelationID interface {
	CorrelationID() string
	SetCorrelationID(id string)
}

type Error struct {
	Channel string
	Err     error
}

func (e *Error) Error() string {
	return fmt.Sprintf("channel %q: err %v", e.Channel, e.Err)
}

// Message 'SMARequestMessageFromSMARequestChannel' reference another one at '#/components/messages/SMARequest'.
// This should be fixed in a future version to allow message override.
// If you encounter this message, feel free to open an issue on this subject
// to let know that you need this functionnality.

// Message 'ListResponseMessageFromSMAResponseChannel' reference another one at '#/components/messages/SMAResponse'.
// This should be fixed in a future version to allow message override.
// If you encounter this message, feel free to open an issue on this subject
// to let know that you need this functionnality.

// Message 'ServiceInfoRequestMessageFromServiceInfoRequestChannel' reference another one at '#/components/messages/ServiceInfoRequest'.
// This should be fixed in a future version to allow message override.
// If you encounter this message, feel free to open an issue on this subject
// to let know that you need this functionnality.

// Message 'ServiceInfoResponseMessageFromServiceInfoResponseChannel' reference another one at '#/components/messages/ServiceInfoResponse'.
// This should be fixed in a future version to allow message override.
// If you encounter this message, feel free to open an issue on this subject
// to let know that you need this functionnality.

// HeadersFromSMARequestMessage is a schema from the AsyncAPI specification required in messages
type HeadersFromSMARequestMessage struct {
	// Description: Correlation ID set by client
	CorrelationId *string `json:"correlationId"`

	// Description: Channel used to respond to request
	ReplyTo string `json:"replyTo"`
}

// SMARequestMessagePayload is a schema from the AsyncAPI specification required in messages
// Description: Candlestick SMA request with filters and time boundaries
type SMARequestMessagePayload struct {
	// Description: Date-time for the newest candlestick (RFC3339)
	End *DateSchema `json:"end"`

	// Description: Requested candlesticks exchange name
	Exchange ExchangeSchema `json:"exchange"`

	// Description: The maximum candlesticks to retrieve (0 = unlimited)
	Limit LimitSchema `json:"limit"`

	// Description: Requested candlesticks pair symbol
	Pair PairSchema `json:"pair"`

	// Description: Requested candlesticks period symbol
	Period PeriodSchema `json:"period"`

	// Description: Number of periods used
	PeriodNumber NumberOfPeriodsSchema `json:"periodNumber"`

	// Description: Type of price from a candlestick
	PriceType *PriceTypeSchema `json:"priceType"`

	// Description: Date-time for the oldest candlestick (RFC3339)
	Start *DateSchema `json:"start"`
}

// SMARequestMessage is the message expected for 'SMARequestMessage' channel.
type SMARequestMessage struct {
	// Headers will be used to fill the message headers
	Headers HeadersFromSMARequestMessage

	// Payload will be inserted in the message payload
	Payload SMARequestMessagePayload
}

func NewSMARequestMessage() SMARequestMessage {
	var msg SMARequestMessage

	// Set correlation ID
	u := uuid.New().String()
	msg.Headers.CorrelationId = &u

	return msg
}

// brokerMessageToSMARequestMessage will fill a new SMARequestMessage with data from generic broker message
func brokerMessageToSMARequestMessage(bMsg extensions.BrokerMessage) (SMARequestMessage, error) {
	var msg SMARequestMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// Get each headers from broker message
	for k, v := range bMsg.Headers {
		switch {
		case k == "correlationId": // Retrieving CorrelationId header
			h := string(v)
			msg.Headers.CorrelationId = &h
		case k == "replyTo": // Retrieving ReplyTo header
			msg.Headers.ReplyTo = string(v)
		default:
			// TODO: log unknown error
		}
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from SMARequestMessage data
func (msg SMARequestMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// Add each headers to broker message
	headers := make(map[string][]byte, 2)

	// Adding CorrelationId header
	if msg.Headers.CorrelationId != nil {
		headers["correlationId"] = []byte(*msg.Headers.CorrelationId)
	} // Adding ReplyTo header
	headers["replyTo"] = []byte(msg.Headers.ReplyTo)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// CorrelationID will give the correlation ID of the message, based on AsyncAPI spec
func (msg SMARequestMessage) CorrelationID() string {
	if msg.Headers.CorrelationId != nil {
		return *msg.Headers.CorrelationId
	}

	return ""
}

// SetCorrelationID will set the correlation ID of the message, based on AsyncAPI spec
func (msg *SMARequestMessage) SetCorrelationID(id string) {
	msg.Headers.CorrelationId = &id
}

// SetAsResponseFrom will correlate the message with the one passed in parameter.
// It will assign the 'req' message correlation ID to the message correlation ID,
// both specified in AsyncAPI spec.
func (msg *SMARequestMessage) SetAsResponseFrom(req MessageWithCorrelationID) {
	id := req.CorrelationID()
	msg.Headers.CorrelationId = &id
}

// HeadersFromSMAResponseMessage is a schema from the AsyncAPI specification required in messages
type HeadersFromSMAResponseMessage struct {
	// Description: Correlation ID set by client
	CorrelationId *string `json:"correlationId"`
}

// SMAResponseMessagePayload is a schema from the AsyncAPI specification required in messages
type SMAResponseMessagePayload struct {
	// Description: A list of timed numbers
	Data *NumericTimeSerieSchema `json:"data"`

	// Description: Response to a failed call
	Error *ErrorSchema `json:"error"`
}

// SMAResponseMessage is the message expected for 'SMAResponseMessage' channel.
type SMAResponseMessage struct {
	// Headers will be used to fill the message headers
	Headers HeadersFromSMAResponseMessage

	// Payload will be inserted in the message payload
	Payload SMAResponseMessagePayload
}

func NewSMAResponseMessage() SMAResponseMessage {
	var msg SMAResponseMessage

	// Set correlation ID
	u := uuid.New().String()
	msg.Headers.CorrelationId = &u

	return msg
}

// brokerMessageToSMAResponseMessage will fill a new SMAResponseMessage with data from generic broker message
func brokerMessageToSMAResponseMessage(bMsg extensions.BrokerMessage) (SMAResponseMessage, error) {
	var msg SMAResponseMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// Get each headers from broker message
	for k, v := range bMsg.Headers {
		switch {
		case k == "correlationId": // Retrieving CorrelationId header
			h := string(v)
			msg.Headers.CorrelationId = &h
		default:
			// TODO: log unknown error
		}
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from SMAResponseMessage data
func (msg SMAResponseMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// Add each headers to broker message
	headers := make(map[string][]byte, 1)

	// Adding CorrelationId header
	if msg.Headers.CorrelationId != nil {
		headers["correlationId"] = []byte(*msg.Headers.CorrelationId)
	}

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// CorrelationID will give the correlation ID of the message, based on AsyncAPI spec
func (msg SMAResponseMessage) CorrelationID() string {
	if msg.Headers.CorrelationId != nil {
		return *msg.Headers.CorrelationId
	}

	return ""
}

// SetCorrelationID will set the correlation ID of the message, based on AsyncAPI spec
func (msg *SMAResponseMessage) SetCorrelationID(id string) {
	msg.Headers.CorrelationId = &id
}

// SetAsResponseFrom will correlate the message with the one passed in parameter.
// It will assign the 'req' message correlation ID to the message correlation ID,
// both specified in AsyncAPI spec.
func (msg *SMAResponseMessage) SetAsResponseFrom(req MessageWithCorrelationID) {
	id := req.CorrelationID()
	msg.Headers.CorrelationId = &id
}

// HeadersFromServiceInfoRequestMessage is a schema from the AsyncAPI specification required in messages
type HeadersFromServiceInfoRequestMessage struct {
	// Description: Correlation ID set by client
	CorrelationId *string `json:"correlationId"`

	// Description: Channel used to respond to request
	ReplyTo string `json:"replyTo"`
}

// ServiceInfoRequestMessagePayload is a schema from the AsyncAPI specification required in messages
type ServiceInfoRequestMessagePayload struct{}

// ServiceInfoRequestMessage is the message expected for 'ServiceInfoRequestMessage' channel.
type ServiceInfoRequestMessage struct {
	// Headers will be used to fill the message headers
	Headers HeadersFromServiceInfoRequestMessage

	// Payload will be inserted in the message payload
	Payload ServiceInfoRequestMessagePayload
}

func NewServiceInfoRequestMessage() ServiceInfoRequestMessage {
	var msg ServiceInfoRequestMessage

	// Set correlation ID
	u := uuid.New().String()
	msg.Headers.CorrelationId = &u

	return msg
}

// brokerMessageToServiceInfoRequestMessage will fill a new ServiceInfoRequestMessage with data from generic broker message
func brokerMessageToServiceInfoRequestMessage(bMsg extensions.BrokerMessage) (ServiceInfoRequestMessage, error) {
	var msg ServiceInfoRequestMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// Get each headers from broker message
	for k, v := range bMsg.Headers {
		switch {
		case k == "correlationId": // Retrieving CorrelationId header
			h := string(v)
			msg.Headers.CorrelationId = &h
		case k == "replyTo": // Retrieving ReplyTo header
			msg.Headers.ReplyTo = string(v)
		default:
			// TODO: log unknown error
		}
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from ServiceInfoRequestMessage data
func (msg ServiceInfoRequestMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// Add each headers to broker message
	headers := make(map[string][]byte, 2)

	// Adding CorrelationId header
	if msg.Headers.CorrelationId != nil {
		headers["correlationId"] = []byte(*msg.Headers.CorrelationId)
	} // Adding ReplyTo header
	headers["replyTo"] = []byte(msg.Headers.ReplyTo)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// CorrelationID will give the correlation ID of the message, based on AsyncAPI spec
func (msg ServiceInfoRequestMessage) CorrelationID() string {
	if msg.Headers.CorrelationId != nil {
		return *msg.Headers.CorrelationId
	}

	return ""
}

// SetCorrelationID will set the correlation ID of the message, based on AsyncAPI spec
func (msg *ServiceInfoRequestMessage) SetCorrelationID(id string) {
	msg.Headers.CorrelationId = &id
}

// SetAsResponseFrom will correlate the message with the one passed in parameter.
// It will assign the 'req' message correlation ID to the message correlation ID,
// both specified in AsyncAPI spec.
func (msg *ServiceInfoRequestMessage) SetAsResponseFrom(req MessageWithCorrelationID) {
	id := req.CorrelationID()
	msg.Headers.CorrelationId = &id
}

// HeadersFromServiceInfoResponseMessage is a schema from the AsyncAPI specification required in messages
type HeadersFromServiceInfoResponseMessage struct {
	// Description: Correlation ID set by client
	CorrelationId *string `json:"correlationId"`
}

// ServiceInfoResponseMessagePayload is a schema from the AsyncAPI specification required in messages
type ServiceInfoResponseMessagePayload struct {
	// Description: Version of the API
	ApiVersion string `json:"apiVersion"`

	// Description: Version of the binary
	BinVersion string `json:"binVersion"`
}

// ServiceInfoResponseMessage is the message expected for 'ServiceInfoResponseMessage' channel.
type ServiceInfoResponseMessage struct {
	// Headers will be used to fill the message headers
	Headers HeadersFromServiceInfoResponseMessage

	// Payload will be inserted in the message payload
	Payload ServiceInfoResponseMessagePayload
}

func NewServiceInfoResponseMessage() ServiceInfoResponseMessage {
	var msg ServiceInfoResponseMessage

	// Set correlation ID
	u := uuid.New().String()
	msg.Headers.CorrelationId = &u

	return msg
}

// brokerMessageToServiceInfoResponseMessage will fill a new ServiceInfoResponseMessage with data from generic broker message
func brokerMessageToServiceInfoResponseMessage(bMsg extensions.BrokerMessage) (ServiceInfoResponseMessage, error) {
	var msg ServiceInfoResponseMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// Get each headers from broker message
	for k, v := range bMsg.Headers {
		switch {
		case k == "correlationId": // Retrieving CorrelationId header
			h := string(v)
			msg.Headers.CorrelationId = &h
		default:
			// TODO: log unknown error
		}
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from ServiceInfoResponseMessage data
func (msg ServiceInfoResponseMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// Add each headers to broker message
	headers := make(map[string][]byte, 1)

	// Adding CorrelationId header
	if msg.Headers.CorrelationId != nil {
		headers["correlationId"] = []byte(*msg.Headers.CorrelationId)
	}

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// CorrelationID will give the correlation ID of the message, based on AsyncAPI spec
func (msg ServiceInfoResponseMessage) CorrelationID() string {
	if msg.Headers.CorrelationId != nil {
		return *msg.Headers.CorrelationId
	}

	return ""
}

// SetCorrelationID will set the correlation ID of the message, based on AsyncAPI spec
func (msg *ServiceInfoResponseMessage) SetCorrelationID(id string) {
	msg.Headers.CorrelationId = &id
}

// SetAsResponseFrom will correlate the message with the one passed in parameter.
// It will assign the 'req' message correlation ID to the message correlation ID,
// both specified in AsyncAPI spec.
func (msg *ServiceInfoResponseMessage) SetAsResponseFrom(req MessageWithCorrelationID) {
	id := req.CorrelationID()
	msg.Headers.CorrelationId = &id
}

// DateSchema is a schema from the AsyncAPI specification required in messages
// Description: Date-Time format according to RFC3339
type DateSchema time.Time

// MarshalJSON will override the marshal as this is not a normal 'time.Time' type
func (t DateSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(time.Time(t))
}

// UnmarshalJSON will override the unmarshal as this is not a normal 'time.Time' type
func (t *DateSchema) UnmarshalJSON(data []byte) error {
	var timeFormat time.Time
	if err := json.Unmarshal(data, &timeFormat); err != nil {
		return err
	}

	*t = DateSchema(timeFormat)
	return nil
}

// ErrorSchema is a schema from the AsyncAPI specification required in messages
// Description: Response to a failed call
type ErrorSchema struct {
	// Description: Code to identify the error type, based on HTTP errors
	Code int64 `json:"code"`

	// Description: Main error reason
	Message string `json:"message"`
}

// ExchangeSchema is a schema from the AsyncAPI specification required in messages
// Description: Exchange name
type ExchangeSchema string

// LimitSchema is a schema from the AsyncAPI specification required in messages
// Description: The maximum quantity to retrieve (0 = unlimited)
type LimitSchema int32

// NumberOfPeriodsSchema is a schema from the AsyncAPI specification required in messages
// Description: Number of periods used
type NumberOfPeriodsSchema int32

// NumericTimeSerieSchema is a schema from the AsyncAPI specification required in messages
// Description: A list of timed numbers
type NumericTimeSerieSchema []ItemSchemaForNumericTimeSerieSchema

// ItemSchemaForNumericTimeSerieSchema is a schema from the AsyncAPI specification required in messages
type ItemSchemaForNumericTimeSerieSchema struct {
	// Description: Date-Time format according to RFC3339
	Time DateSchema `json:"time"`

	// Description: Numerical value
	Value *float64 `json:"value"`
}

// PairSchema is a schema from the AsyncAPI specification required in messages
// Description: Pair symbol
type PairSchema string

// PeriodSchema is a schema from the AsyncAPI specification required in messages
// Description: Period symbol
type PeriodSchema string

// PriceTypeSchema is a schema from the AsyncAPI specification required in messages
// Description: Type of price from a candlestick
type PriceTypeSchema string

const (
	// SMARequestChannelPath is the constant representing the 'SMARequestChannel' channel path.
	SMARequestChannelPath = "cryptellation.indicators.sma"
	// SMAResponseChannelPath is the constant representing the 'SMAResponseChannel' channel path.
	SMAResponseChannelPath = ""
	// ServiceInfoRequestChannelPath is the constant representing the 'ServiceInfoRequestChannel' channel path.
	ServiceInfoRequestChannelPath = "cryptellation.indicators.info"
	// ServiceInfoResponseChannelPath is the constant representing the 'ServiceInfoResponseChannel' channel path.
	ServiceInfoResponseChannelPath = ""
)

// ChannelsPaths is an array of all channels paths
var ChannelsPaths = []string{
	SMARequestChannelPath,
	SMAResponseChannelPath,
	ServiceInfoRequestChannelPath,
	ServiceInfoResponseChannelPath,
}
