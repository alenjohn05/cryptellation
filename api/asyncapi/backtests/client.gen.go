// Package "backtests" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package backtests

import (
	"context"
	"fmt"
)

// ClientSubscriber represents all handlers that are expecting messages for Client
type ClientSubscriber interface {
	// BacktestsAccountsListResponse
	BacktestsAccountsListResponse(msg BacktestsAccountsListResponseMessage, done bool)

	// BacktestsAdvanceResponse
	BacktestsAdvanceResponse(msg BacktestsAdvanceResponseMessage, done bool)

	// BacktestsCreateResponse
	BacktestsCreateResponse(msg BacktestsCreateResponseMessage, done bool)

	// BacktestsEventsID
	BacktestsEventsID(msg BacktestsEventMessage, done bool)

	// BacktestsOrdersCreateResponse
	BacktestsOrdersCreateResponse(msg BacktestsOrdersCreateResponseMessage, done bool)

	// BacktestsOrdersListResponse
	BacktestsOrdersListResponse(msg BacktestsOrdersListResponseMessage, done bool)

	// BacktestsSubscribeResponse
	BacktestsSubscribeResponse(msg BacktestsSubscribeResponseMessage, done bool)
}

// ClientController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the Client
type ClientController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
	errChan          chan Error
}

// NewClientController links the Client to the broker
func NewClientController(bs BrokerController) (*ClientController, error) {
	if bs == nil {
		return nil, ErrNilBrokerController
	}

	return &ClientController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
		errChan:          make(chan Error, 256),
	}, nil
}

// Errors will give back the channel that contains errors and that you can listen to handle errors
// Please take a look at Error struct form information on error
func (c ClientController) Errors() <-chan Error {
	return c.errChan
}

// Close will clean up any existing resources on the controller
func (c *ClientController) Close() {
	// Unsubscribing remaining channels
	c.UnsubscribeAll()
	// Close the channel and put its reference to nil, if not already closed (= being nil)
	if c.errChan != nil {
		close(c.errChan)
		c.errChan = nil
	}
}

// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *ClientController) SubscribeAll(as ClientSubscriber) error {
	if as == nil {
		return ErrNilClientSubscriber
	}

	if err := c.SubscribeBacktestsAccountsListResponse(as.BacktestsAccountsListResponse); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsAdvanceResponse(as.BacktestsAdvanceResponse); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsCreateResponse(as.BacktestsCreateResponse); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsOrdersCreateResponse(as.BacktestsOrdersCreateResponse); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsOrdersListResponse(as.BacktestsOrdersListResponse); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsSubscribeResponse(as.BacktestsSubscribeResponse); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *ClientController) UnsubscribeAll() {
	// Unsubscribe channels with no parameters (if any)
	c.UnsubscribeBacktestsAccountsListResponse()
	c.UnsubscribeBacktestsAdvanceResponse()
	c.UnsubscribeBacktestsCreateResponse()
	c.UnsubscribeBacktestsOrdersCreateResponse()
	c.UnsubscribeBacktestsOrdersListResponse()
	c.UnsubscribeBacktestsSubscribeResponse()

	// Unsubscribe remaining channels
	for n, stopChan := range c.stopSubscribers {
		stopChan <- true
		delete(c.stopSubscribers, n)
	}
}

// SubscribeBacktestsAccountsListResponse will subscribe to new messages from 'backtests.accounts.list.response' channel.
//
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeBacktestsAccountsListResponse(fn func(msg BacktestsAccountsListResponseMessage, done bool)) error {
	// Get channel path
	path := "backtests.accounts.list.response"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsAccountsListResponseMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsAccountsListResponse will unsubscribe messages from 'backtests.accounts.list.response' channel
func (c *ClientController) UnsubscribeBacktestsAccountsListResponse() {
	// Get channel path
	path := "backtests.accounts.list.response"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsAdvanceResponse will subscribe to new messages from 'backtests.advance.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeBacktestsAdvanceResponse(fn func(msg BacktestsAdvanceResponseMessage, done bool)) error {
	// Get channel path
	path := "backtests.advance.response"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsAdvanceResponseMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsAdvanceResponse will unsubscribe messages from 'backtests.advance.response' channel
func (c *ClientController) UnsubscribeBacktestsAdvanceResponse() {
	// Get channel path
	path := "backtests.advance.response"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsCreateResponse will subscribe to new messages from 'backtests.create.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeBacktestsCreateResponse(fn func(msg BacktestsCreateResponseMessage, done bool)) error {
	// Get channel path
	path := "backtests.create.response"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsCreateResponseMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsCreateResponse will unsubscribe messages from 'backtests.create.response' channel
func (c *ClientController) UnsubscribeBacktestsCreateResponse() {
	// Get channel path
	path := "backtests.create.response"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsEventsID will subscribe to new messages from 'backtests.events.{id}' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeBacktestsEventsID(params BacktestsEventsIDParameters, fn func(msg BacktestsEventMessage, done bool)) error {
	// Get channel path
	path := fmt.Sprintf("backtests.events.%v", params.ID)

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsEventMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsEventsID will unsubscribe messages from 'backtests.events.{id}' channel
func (c *ClientController) UnsubscribeBacktestsEventsID(params BacktestsEventsIDParameters) {
	// Get channel path
	path := fmt.Sprintf("backtests.events.%v", params.ID)

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsOrdersCreateResponse will subscribe to new messages from 'backtests.orders.create.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeBacktestsOrdersCreateResponse(fn func(msg BacktestsOrdersCreateResponseMessage, done bool)) error {
	// Get channel path
	path := "backtests.orders.create.response"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsOrdersCreateResponseMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsOrdersCreateResponse will unsubscribe messages from 'backtests.orders.create.response' channel
func (c *ClientController) UnsubscribeBacktestsOrdersCreateResponse() {
	// Get channel path
	path := "backtests.orders.create.response"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsOrdersListResponse will subscribe to new messages from 'backtests.orders.list.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeBacktestsOrdersListResponse(fn func(msg BacktestsOrdersListResponseMessage, done bool)) error {
	// Get channel path
	path := "backtests.orders.list.response"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsOrdersListResponseMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsOrdersListResponse will unsubscribe messages from 'backtests.orders.list.response' channel
func (c *ClientController) UnsubscribeBacktestsOrdersListResponse() {
	// Get channel path
	path := "backtests.orders.list.response"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsSubscribeResponse will subscribe to new messages from 'backtests.subscribe.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeBacktestsSubscribeResponse(fn func(msg BacktestsSubscribeResponseMessage, done bool)) error {
	// Get channel path
	path := "backtests.subscribe.response"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsSubscribeResponseMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsSubscribeResponse will unsubscribe messages from 'backtests.subscribe.response' channel
func (c *ClientController) UnsubscribeBacktestsSubscribeResponse() {
	// Get channel path
	path := "backtests.subscribe.response"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
}

// PublishBacktestsAccountsListRequest will publish messages to 'backtests.accounts.list.request' channel
func (c *ClientController) PublishBacktestsAccountsListRequest(msg BacktestsAccountsListRequestMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.accounts.list.request"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsAdvanceRequest will publish messages to 'backtests.advance.request' channel
func (c *ClientController) PublishBacktestsAdvanceRequest(msg BacktestsAdvanceRequestMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.advance.request"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsCreateRequest will publish messages to 'backtests.create.request' channel
func (c *ClientController) PublishBacktestsCreateRequest(msg BacktestsCreateRequestMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.create.request"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsOrdersCreateRequest will publish messages to 'backtests.orders.create.request' channel
func (c *ClientController) PublishBacktestsOrdersCreateRequest(msg BacktestsOrdersCreateRequestMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.orders.create.request"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsOrdersListRequest will publish messages to 'backtests.orders.list.request' channel
func (c *ClientController) PublishBacktestsOrdersListRequest(msg BacktestsOrdersListRequestMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.orders.list.request"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsSubscribeRequest will publish messages to 'backtests.subscribe.request' channel
func (c *ClientController) PublishBacktestsSubscribeRequest(msg BacktestsSubscribeRequestMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.subscribe.request"
	return c.brokerController.Publish(path, um)
}

func (c *ClientController) handleError(channelName string, err error) {
	// Wrap error with the channel name
	errWrapped := Error{
		Channel: channelName,
		Err:     err,
	}

	// Send it to the error channel
	select {
	case c.errChan <- errWrapped:
	default:
		// Drop error if it's full or closed
	}
}

// WaitForBacktestsAccountsListResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForBacktestsAccountsListResponse(ctx context.Context, msg MessageWithCorrelationID, pub func() error) (BacktestsAccountsListResponseMessage, error) {
	// Get channel path
	path := "backtests.accounts.list.response"

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe(path)
	if err != nil {
		return BacktestsAccountsListResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	if err := pub(); err != nil {
		return BacktestsAccountsListResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:
			// Get new message
			msg, err := newBacktestsAccountsListResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.handleError(path, err)
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil &&
				msg.Headers.CorrelationID != nil && msg.CorrelationID() == *msg.Headers.CorrelationID {
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				return BacktestsAccountsListResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			return BacktestsAccountsListResponseMessage{}, ErrContextCanceled
		}
	}
}

// WaitForBacktestsAdvanceResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForBacktestsAdvanceResponse(ctx context.Context, msg MessageWithCorrelationID, pub func() error) (BacktestsAdvanceResponseMessage, error) {
	// Get channel path
	path := "backtests.advance.response"

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe(path)
	if err != nil {
		return BacktestsAdvanceResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	if err := pub(); err != nil {
		return BacktestsAdvanceResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:
			// Get new message
			msg, err := newBacktestsAdvanceResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.handleError(path, err)
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil &&
				msg.Headers.CorrelationID != nil && msg.CorrelationID() == *msg.Headers.CorrelationID {
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				return BacktestsAdvanceResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			return BacktestsAdvanceResponseMessage{}, ErrContextCanceled
		}
	}
}

// WaitForBacktestsCreateResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForBacktestsCreateResponse(ctx context.Context, msg MessageWithCorrelationID, pub func() error) (BacktestsCreateResponseMessage, error) {
	// Get channel path
	path := "backtests.create.response"

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe(path)
	if err != nil {
		return BacktestsCreateResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	if err := pub(); err != nil {
		return BacktestsCreateResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:
			// Get new message
			msg, err := newBacktestsCreateResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.handleError(path, err)
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil &&
				msg.Headers.CorrelationID != nil && msg.CorrelationID() == *msg.Headers.CorrelationID {
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				return BacktestsCreateResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			return BacktestsCreateResponseMessage{}, ErrContextCanceled
		}
	}
}

// WaitForBacktestsOrdersCreateResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForBacktestsOrdersCreateResponse(ctx context.Context, msg MessageWithCorrelationID, pub func() error) (BacktestsOrdersCreateResponseMessage, error) {
	// Get channel path
	path := "backtests.orders.create.response"

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe(path)
	if err != nil {
		return BacktestsOrdersCreateResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	if err := pub(); err != nil {
		return BacktestsOrdersCreateResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:
			// Get new message
			msg, err := newBacktestsOrdersCreateResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.handleError(path, err)
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil &&
				msg.Headers.CorrelationID != nil && msg.CorrelationID() == *msg.Headers.CorrelationID {
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				return BacktestsOrdersCreateResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			return BacktestsOrdersCreateResponseMessage{}, ErrContextCanceled
		}
	}
}

// WaitForBacktestsOrdersListResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForBacktestsOrdersListResponse(ctx context.Context, msg MessageWithCorrelationID, pub func() error) (BacktestsOrdersListResponseMessage, error) {
	// Get channel path
	path := "backtests.orders.list.response"

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe(path)
	if err != nil {
		return BacktestsOrdersListResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	if err := pub(); err != nil {
		return BacktestsOrdersListResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:
			// Get new message
			msg, err := newBacktestsOrdersListResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.handleError(path, err)
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil &&
				msg.Headers.CorrelationID != nil && msg.CorrelationID() == *msg.Headers.CorrelationID {
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				return BacktestsOrdersListResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			return BacktestsOrdersListResponseMessage{}, ErrContextCanceled
		}
	}
}

// WaitForBacktestsSubscribeResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForBacktestsSubscribeResponse(ctx context.Context, msg MessageWithCorrelationID, pub func() error) (BacktestsSubscribeResponseMessage, error) {
	// Get channel path
	path := "backtests.subscribe.response"

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe(path)
	if err != nil {
		return BacktestsSubscribeResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	if err := pub(); err != nil {
		return BacktestsSubscribeResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:
			// Get new message
			msg, err := newBacktestsSubscribeResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.handleError(path, err)
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil &&
				msg.Headers.CorrelationID != nil && msg.CorrelationID() == *msg.Headers.CorrelationID {
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				return BacktestsSubscribeResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			return BacktestsSubscribeResponseMessage{}, ErrContextCanceled
		}
	}
}
