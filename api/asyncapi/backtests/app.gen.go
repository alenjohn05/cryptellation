// Package "backtests" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package backtests

import (
	"fmt"
)

// AppSubscriber represents all handlers that are expecting messages for App
type AppSubscriber interface {
	// BacktestsAccountsListRequest
	BacktestsAccountsListRequest(msg BacktestsAccountsListRequestMessage, done bool)

	// BacktestsAdvanceRequest
	BacktestsAdvanceRequest(msg BacktestsAdvanceRequestMessage, done bool)

	// BacktestsCreateRequest
	BacktestsCreateRequest(msg BacktestsCreateRequestMessage, done bool)

	// BacktestsOrdersCreateRequest
	BacktestsOrdersCreateRequest(msg BacktestsOrdersCreateRequestMessage, done bool)

	// BacktestsOrdersListRequest
	BacktestsOrdersListRequest(msg BacktestsOrdersListRequestMessage, done bool)

	// BacktestsSubscribeRequest
	BacktestsSubscribeRequest(msg BacktestsSubscribeRequestMessage, done bool)
}

// AppController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the App
type AppController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
	errChan          chan Error
}

// NewAppController links the App to the broker
func NewAppController(bs BrokerController) (*AppController, error) {
	if bs == nil {
		return nil, ErrNilBrokerController
	}

	return &AppController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
		errChan:          make(chan Error, 256),
	}, nil
}

// Errors will give back the channel that contains errors and that you can listen to handle errors
// Please take a look at Error struct form information on error
func (c AppController) Errors() <-chan Error {
	return c.errChan
}

// Close will clean up any existing resources on the controller
func (c *AppController) Close() {
	// Unsubscribing remaining channels
	c.UnsubscribeAll()
	// Close the channel and put its reference to nil, if not already closed (= being nil)
	if c.errChan != nil {
		close(c.errChan)
		c.errChan = nil
	}
}

// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *AppController) SubscribeAll(as AppSubscriber) error {
	if as == nil {
		return ErrNilAppSubscriber
	}

	if err := c.SubscribeBacktestsAccountsListRequest(as.BacktestsAccountsListRequest); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsAdvanceRequest(as.BacktestsAdvanceRequest); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsCreateRequest(as.BacktestsCreateRequest); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsOrdersCreateRequest(as.BacktestsOrdersCreateRequest); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsOrdersListRequest(as.BacktestsOrdersListRequest); err != nil {
		return err
	}
	if err := c.SubscribeBacktestsSubscribeRequest(as.BacktestsSubscribeRequest); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *AppController) UnsubscribeAll() {
	// Unsubscribe channels with no parameters (if any)
	c.UnsubscribeBacktestsAccountsListRequest()
	c.UnsubscribeBacktestsAdvanceRequest()
	c.UnsubscribeBacktestsCreateRequest()
	c.UnsubscribeBacktestsOrdersCreateRequest()
	c.UnsubscribeBacktestsOrdersListRequest()
	c.UnsubscribeBacktestsSubscribeRequest()

	// Unsubscribe remaining channels
	for n, stopChan := range c.stopSubscribers {
		stopChan <- true
		delete(c.stopSubscribers, n)
	}
}

// SubscribeBacktestsAccountsListRequest will subscribe to new messages from 'backtests.accounts.list.request' channel.
//
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeBacktestsAccountsListRequest(fn func(msg BacktestsAccountsListRequestMessage, done bool)) error {
	// Get channel path
	path := "backtests.accounts.list.request"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsAccountsListRequestMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsAccountsListRequest will unsubscribe messages from 'backtests.accounts.list.request' channel
func (c *AppController) UnsubscribeBacktestsAccountsListRequest() {
	// Get channel path
	path := "backtests.accounts.list.request"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsAdvanceRequest will subscribe to new messages from 'backtests.advance.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeBacktestsAdvanceRequest(fn func(msg BacktestsAdvanceRequestMessage, done bool)) error {
	// Get channel path
	path := "backtests.advance.request"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsAdvanceRequestMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsAdvanceRequest will unsubscribe messages from 'backtests.advance.request' channel
func (c *AppController) UnsubscribeBacktestsAdvanceRequest() {
	// Get channel path
	path := "backtests.advance.request"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsCreateRequest will subscribe to new messages from 'backtests.create.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeBacktestsCreateRequest(fn func(msg BacktestsCreateRequestMessage, done bool)) error {
	// Get channel path
	path := "backtests.create.request"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsCreateRequestMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsCreateRequest will unsubscribe messages from 'backtests.create.request' channel
func (c *AppController) UnsubscribeBacktestsCreateRequest() {
	// Get channel path
	path := "backtests.create.request"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsOrdersCreateRequest will subscribe to new messages from 'backtests.orders.create.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeBacktestsOrdersCreateRequest(fn func(msg BacktestsOrdersCreateRequestMessage, done bool)) error {
	// Get channel path
	path := "backtests.orders.create.request"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsOrdersCreateRequestMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsOrdersCreateRequest will unsubscribe messages from 'backtests.orders.create.request' channel
func (c *AppController) UnsubscribeBacktestsOrdersCreateRequest() {
	// Get channel path
	path := "backtests.orders.create.request"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsOrdersListRequest will subscribe to new messages from 'backtests.orders.list.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeBacktestsOrdersListRequest(fn func(msg BacktestsOrdersListRequestMessage, done bool)) error {
	// Get channel path
	path := "backtests.orders.list.request"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsOrdersListRequestMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsOrdersListRequest will unsubscribe messages from 'backtests.orders.list.request' channel
func (c *AppController) UnsubscribeBacktestsOrdersListRequest() {
	// Get channel path
	path := "backtests.orders.list.request"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeBacktestsSubscribeRequest will subscribe to new messages from 'backtests.subscribe.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeBacktestsSubscribeRequest(fn func(msg BacktestsSubscribeRequestMessage, done bool)) error {
	// Get channel path
	path := "backtests.subscribe.request"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		return fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsSubscribeRequestMessageFromUniversalMessage(um)
			if err != nil {
				c.handleError(path, err)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeBacktestsSubscribeRequest will unsubscribe messages from 'backtests.subscribe.request' channel
func (c *AppController) UnsubscribeBacktestsSubscribeRequest() {
	// Get channel path
	path := "backtests.subscribe.request"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	stopChan <- true
	delete(c.stopSubscribers, path)
}

// PublishBacktestsAccountsListResponse will publish messages to 'backtests.accounts.list.response' channel
func (c *AppController) PublishBacktestsAccountsListResponse(msg BacktestsAccountsListResponseMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.accounts.list.response"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsAdvanceResponse will publish messages to 'backtests.advance.response' channel
func (c *AppController) PublishBacktestsAdvanceResponse(msg BacktestsAdvanceResponseMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.advance.response"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsCreateResponse will publish messages to 'backtests.create.response' channel
func (c *AppController) PublishBacktestsCreateResponse(msg BacktestsCreateResponseMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.create.response"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsEventsID will publish messages to 'backtests.events.{id}' channel
func (c *AppController) PublishBacktestsEventsID(params BacktestsEventsIDParameters, msg BacktestsEventMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := fmt.Sprintf("backtests.events.%v", params.ID)
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsOrdersCreateResponse will publish messages to 'backtests.orders.create.response' channel
func (c *AppController) PublishBacktestsOrdersCreateResponse(msg BacktestsOrdersCreateResponseMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.orders.create.response"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsOrdersListResponse will publish messages to 'backtests.orders.list.response' channel
func (c *AppController) PublishBacktestsOrdersListResponse(msg BacktestsOrdersListResponseMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.orders.list.response"
	return c.brokerController.Publish(path, um)
}

// PublishBacktestsSubscribeResponse will publish messages to 'backtests.subscribe.response' channel
func (c *AppController) PublishBacktestsSubscribeResponse(msg BacktestsSubscribeResponseMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	path := "backtests.subscribe.response"
	return c.brokerController.Publish(path, um)
}

func (c *AppController) handleError(channelName string, err error) {
	// Wrap error with the channel name
	errWrapped := Error{
		Channel: channelName,
		Err:     err,
	}

	// Send it to the error channel
	select {
	case c.errChan <- errWrapped:
	default:
		// Drop error if it's full or closed
	}
}
