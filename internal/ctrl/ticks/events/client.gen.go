// Package "events" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version v0.16.0 DO NOT EDIT.
package events

import (
	"context"
	"fmt"

	aapiContext "github.com/lerenn/asyncapi-codegen/pkg/context"
	"github.com/lerenn/asyncapi-codegen/pkg/log"
)

// ClientSubscriber represents all handlers that are expecting messages for Client
type ClientSubscriber interface {
	// CryptellationTicksListenExchangePair
	CryptellationTicksListenExchangePair(ctx context.Context, msg TickMessage, done bool)

	// CryptellationTicksRegisterResponse
	CryptellationTicksRegisterResponse(ctx context.Context, msg RegisteringResponseMessage, done bool)

	// CryptellationTicksUnregisterResponse
	CryptellationTicksUnregisterResponse(ctx context.Context, msg RegisteringResponseMessage, done bool)
}

// ClientController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the Client
type ClientController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
	logger           log.Logger
}

// NewClientController links the Client to the broker
func NewClientController(bs BrokerController) (*ClientController, error) {
	if bs == nil {
		return nil, ErrNilBrokerController
	}

	return &ClientController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
		logger:           log.Silent{},
	}, nil
}

// SetLogger attaches a logger that will log operations on controller
func (c *ClientController) SetLogger(logger log.Logger) {
	c.logger = logger
	c.brokerController.SetLogger(logger)
}

func addClientContextValues(ctx context.Context, path, operation string) context.Context {
	ctx = context.WithValue(ctx, aapiContext.KeyIsModule, "asyncapi")
	ctx = context.WithValue(ctx, aapiContext.KeyIsProvider, "client")
	ctx = context.WithValue(ctx, aapiContext.KeyIsAction, path)
	return context.WithValue(ctx, aapiContext.KeyIsOperation, operation)
}

// Close will clean up any existing resources on the controller
func (c *ClientController) Close(ctx context.Context) {
	// Unsubscribing remaining channels
	c.logger.Info(ctx, "Closing Client controller")
	c.UnsubscribeAll(ctx)
}

// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *ClientController) SubscribeAll(ctx context.Context, as ClientSubscriber) error {
	if as == nil {
		return ErrNilClientSubscriber
	}

	if err := c.SubscribeCryptellationTicksRegisterResponse(ctx, as.CryptellationTicksRegisterResponse); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationTicksUnregisterResponse(ctx, as.CryptellationTicksUnregisterResponse); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *ClientController) UnsubscribeAll(ctx context.Context) {
	// Unsubscribe channels with no parameters (if any)
	c.UnsubscribeCryptellationTicksRegisterResponse(ctx)
	c.UnsubscribeCryptellationTicksUnregisterResponse(ctx)

	// Unsubscribe remaining channels
	for n, stopChan := range c.stopSubscribers {
		stopChan <- true
		delete(c.stopSubscribers, n)
	}
}

// SubscribeCryptellationTicksListenExchangePair will subscribe to new messages from 'cryptellation.ticks.listen.{exchange}.{pair}' channel.
//
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeCryptellationTicksListenExchangePair(ctx context.Context, params CryptellationTicksListenExchangePairParameters, fn func(ctx context.Context, msg TickMessage, done bool)) error {
	// Get channel path
	path := fmt.Sprintf("cryptellation.ticks.listen.%v.%v", params.Exchange, params.Pair)

	// Set context
	ctx = addClientContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newTickMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationTicksListenExchangePair will unsubscribe messages from 'cryptellation.ticks.listen.{exchange}.{pair}' channel
func (c *ClientController) UnsubscribeCryptellationTicksListenExchangePair(ctx context.Context, params CryptellationTicksListenExchangePairParameters) {
	// Get channel path
	path := fmt.Sprintf("cryptellation.ticks.listen.%v.%v", params.Exchange, params.Pair)

	// Set context
	ctx = addClientContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationTicksRegisterResponse will subscribe to new messages from 'cryptellation.ticks.register.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeCryptellationTicksRegisterResponse(ctx context.Context, fn func(ctx context.Context, msg RegisteringResponseMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.ticks.register.response"

	// Set context
	ctx = addClientContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newRegisteringResponseMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationTicksRegisterResponse will unsubscribe messages from 'cryptellation.ticks.register.response' channel
func (c *ClientController) UnsubscribeCryptellationTicksRegisterResponse(ctx context.Context) {
	// Get channel path
	path := "cryptellation.ticks.register.response"

	// Set context
	ctx = addClientContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationTicksUnregisterResponse will subscribe to new messages from 'cryptellation.ticks.unregister.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeCryptellationTicksUnregisterResponse(ctx context.Context, fn func(ctx context.Context, msg RegisteringResponseMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.ticks.unregister.response"

	// Set context
	ctx = addClientContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newRegisteringResponseMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationTicksUnregisterResponse will unsubscribe messages from 'cryptellation.ticks.unregister.response' channel
func (c *ClientController) UnsubscribeCryptellationTicksUnregisterResponse(ctx context.Context) {
	// Get channel path
	path := "cryptellation.ticks.unregister.response"

	// Set context
	ctx = addClientContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
}

// PublishCryptellationTicksRegisterRequest will publish messages to 'cryptellation.ticks.register.request' channel
func (c *ClientController) PublishCryptellationTicksRegisterRequest(ctx context.Context, msg RegisteringRequestMessage) error {
	// Get channel path
	path := "cryptellation.ticks.register.request"

	// Set context
	ctx = addClientContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}

// PublishCryptellationTicksUnregisterRequest will publish messages to 'cryptellation.ticks.unregister.request' channel
func (c *ClientController) PublishCryptellationTicksUnregisterRequest(ctx context.Context, msg RegisteringRequestMessage) error {
	// Get channel path
	path := "cryptellation.ticks.unregister.request"

	// Set context
	ctx = addClientContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}

// WaitForCryptellationTicksRegisterResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForCryptellationTicksRegisterResponse(ctx context.Context, publishMsg MessageWithCorrelationID, pub func(ctx context.Context) error) (RegisteringResponseMessage, error) {
	// Get channel path
	path := "cryptellation.ticks.register.response"

	// Set context
	ctx = addClientContextValues(ctx, path, "wait-for")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, publishMsg)
	ctx = context.WithValue(ctx, aapiContext.KeyIsCorrelationID, publishMsg.CorrelationID())

	// Subscribe to broker channel
	cc.logger.Info(ctx, "Wait for response")
	msgs, stop, err := cc.brokerController.Subscribe(ctx, path)
	if err != nil {
		cc.logger.Error(ctx, err.Error())
		return RegisteringResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	cc.logger.Info(ctx, "Sending request")
	if err := pub(ctx); err != nil {
		return RegisteringResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:

			// Get new message
			msg, err := newRegisteringResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.logger.Error(ctx, err.Error())
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil && publishMsg.CorrelationID() == msg.CorrelationID() {
				cc.logger.Info(ctx, "Received expected message")
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				cc.logger.Error(ctx, "Channel closed before getting message")
				return RegisteringResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			cc.logger.Error(ctx, "Context done before getting message")
			return RegisteringResponseMessage{}, ErrContextCanceled
		}
	}
}

// WaitForCryptellationTicksUnregisterResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForCryptellationTicksUnregisterResponse(ctx context.Context, publishMsg MessageWithCorrelationID, pub func(ctx context.Context) error) (RegisteringResponseMessage, error) {
	// Get channel path
	path := "cryptellation.ticks.unregister.response"

	// Set context
	ctx = addClientContextValues(ctx, path, "wait-for")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, publishMsg)
	ctx = context.WithValue(ctx, aapiContext.KeyIsCorrelationID, publishMsg.CorrelationID())

	// Subscribe to broker channel
	cc.logger.Info(ctx, "Wait for response")
	msgs, stop, err := cc.brokerController.Subscribe(ctx, path)
	if err != nil {
		cc.logger.Error(ctx, err.Error())
		return RegisteringResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	cc.logger.Info(ctx, "Sending request")
	if err := pub(ctx); err != nil {
		return RegisteringResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:

			// Get new message
			msg, err := newRegisteringResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.logger.Error(ctx, err.Error())
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil && publishMsg.CorrelationID() == msg.CorrelationID() {
				cc.logger.Info(ctx, "Received expected message")
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				cc.logger.Error(ctx, "Channel closed before getting message")
				return RegisteringResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			cc.logger.Error(ctx, "Context done before getting message")
			return RegisteringResponseMessage{}, ErrContextCanceled
		}
	}
}
