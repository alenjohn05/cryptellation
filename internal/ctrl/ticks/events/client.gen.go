// Package "events" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version v0.13.1 DO NOT EDIT.
package events

import (
	"context"
	"fmt"
)

// ClientSubscriber represents all handlers that are expecting messages for Client
type ClientSubscriber interface {
	// CryptellationTicksListenExchangePair
	CryptellationTicksListenExchangePair(msg TickMessage, done bool)

	// CryptellationTicksRegisterResponse
	CryptellationTicksRegisterResponse(msg RegisteringResponseMessage, done bool)

	// CryptellationTicksUnregisterResponse
	CryptellationTicksUnregisterResponse(msg RegisteringResponseMessage, done bool)
}

// ClientController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the Client
type ClientController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
	logger           Logger
}

// NewClientController links the Client to the broker
func NewClientController(bs BrokerController) (*ClientController, error) {
	if bs == nil {
		return nil, ErrNilBrokerController
	}

	return &ClientController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
	}, nil
}

// AttachLogger attaches a logger that will log operations on controller
func (c *ClientController) AttachLogger(logger Logger) {
	c.logger = logger
	c.brokerController.AttachLogger(logger)
}

// logError logs error if the logger has been set
func (c ClientController) logError(msg string, keyvals ...interface{}) {
	if c.logger != nil {
		keyvals = append(keyvals, "module", "asyncapi", "controller", "Client")
		c.logger.Error(msg, keyvals...)
	}
}

// logInfo logs information if the logger has been set
func (c ClientController) logInfo(msg string, keyvals ...interface{}) {
	if c.logger != nil {
		keyvals = append(keyvals, "module", "asyncapi", "controller", "Client")
		c.logger.Info(msg, keyvals...)
	}
}

// Close will clean up any existing resources on the controller
func (c *ClientController) Close() {
	// Unsubscribing remaining channels
	c.logInfo("Closing Client controller")
	c.UnsubscribeAll()
}

// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *ClientController) SubscribeAll(as ClientSubscriber) error {
	if as == nil {
		return ErrNilClientSubscriber
	}

	if err := c.SubscribeCryptellationTicksRegisterResponse(as.CryptellationTicksRegisterResponse); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationTicksUnregisterResponse(as.CryptellationTicksUnregisterResponse); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *ClientController) UnsubscribeAll() {
	// Unsubscribe channels with no parameters (if any)
	c.UnsubscribeCryptellationTicksRegisterResponse()
	c.UnsubscribeCryptellationTicksUnregisterResponse()

	// Unsubscribe remaining channels
	for n, stopChan := range c.stopSubscribers {
		stopChan <- true
		delete(c.stopSubscribers, n)
	}
}

// SubscribeCryptellationTicksListenExchangePair will subscribe to new messages from 'cryptellation.ticks.listen.{exchange}.{pair}' channel.
//
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeCryptellationTicksListenExchangePair(params CryptellationTicksListenExchangePairParameters, fn func(msg TickMessage, done bool)) error {
	// Get channel path
	path := fmt.Sprintf("cryptellation.ticks.listen.%v.%v", params.Exchange, params.Pair)

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logError(err.Error(), "channel", path)
		return err
	}

	// Subscribe to broker channel
	c.logInfo("Subscribing to channel", "channel", path, "operation", "subscribe")
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		c.logError(err.Error(), "channel", path, "operation", "subscribe")
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newTickMessageFromUniversalMessage(um)
			if err != nil {
				c.logError(err.Error(), "channel", path, "operation", "subscribe", "message", msg)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logInfo("Received new message", "channel", path, "operation", "subscribe", "message", msg)
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationTicksListenExchangePair will unsubscribe messages from 'cryptellation.ticks.listen.{exchange}.{pair}' channel
func (c *ClientController) UnsubscribeCryptellationTicksListenExchangePair(params CryptellationTicksListenExchangePairParameters) {
	// Get channel path
	path := fmt.Sprintf("cryptellation.ticks.listen.%v.%v", params.Exchange, params.Pair)

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logInfo("Unsubscribing from channel", "channel", path, "operation", "unsubscribe")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationTicksRegisterResponse will subscribe to new messages from 'cryptellation.ticks.register.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeCryptellationTicksRegisterResponse(fn func(msg RegisteringResponseMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.ticks.register.response"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logError(err.Error(), "channel", path)
		return err
	}

	// Subscribe to broker channel
	c.logInfo("Subscribing to channel", "channel", path, "operation", "subscribe")
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		c.logError(err.Error(), "channel", path, "operation", "subscribe")
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newRegisteringResponseMessageFromUniversalMessage(um)
			if err != nil {
				c.logError(err.Error(), "channel", path, "operation", "subscribe", "message", msg)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logInfo("Received new message", "channel", path, "operation", "subscribe", "message", msg)
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationTicksRegisterResponse will unsubscribe messages from 'cryptellation.ticks.register.response' channel
func (c *ClientController) UnsubscribeCryptellationTicksRegisterResponse() {
	// Get channel path
	path := "cryptellation.ticks.register.response"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logInfo("Unsubscribing from channel", "channel", path, "operation", "unsubscribe")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationTicksUnregisterResponse will subscribe to new messages from 'cryptellation.ticks.unregister.response' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *ClientController) SubscribeCryptellationTicksUnregisterResponse(fn func(msg RegisteringResponseMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.ticks.unregister.response"

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logError(err.Error(), "channel", path)
		return err
	}

	// Subscribe to broker channel
	c.logInfo("Subscribing to channel", "channel", path, "operation", "subscribe")
	msgs, stop, err := c.brokerController.Subscribe(path)
	if err != nil {
		c.logError(err.Error(), "channel", path, "operation", "subscribe")
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newRegisteringResponseMessageFromUniversalMessage(um)
			if err != nil {
				c.logError(err.Error(), "channel", path, "operation", "subscribe", "message", msg)
			}

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logInfo("Received new message", "channel", path, "operation", "subscribe", "message", msg)
				fn(msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationTicksUnregisterResponse will unsubscribe messages from 'cryptellation.ticks.unregister.response' channel
func (c *ClientController) UnsubscribeCryptellationTicksUnregisterResponse() {
	// Get channel path
	path := "cryptellation.ticks.unregister.response"

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logInfo("Unsubscribing from channel", "channel", path, "operation", "unsubscribe")
	stopChan <- true
	delete(c.stopSubscribers, path)
}

// PublishCryptellationTicksRegisterRequest will publish messages to 'cryptellation.ticks.register.request' channel
func (c *ClientController) PublishCryptellationTicksRegisterRequest(msg RegisteringRequestMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Get channel path
	path := "cryptellation.ticks.register.request"

	// Publish on event broker
	c.logInfo("Publishing to channel", "channel", path, "operation", "publish", "message", msg)
	return c.brokerController.Publish(path, um)
}

// PublishCryptellationTicksUnregisterRequest will publish messages to 'cryptellation.ticks.unregister.request' channel
func (c *ClientController) PublishCryptellationTicksUnregisterRequest(msg RegisteringRequestMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Get channel path
	path := "cryptellation.ticks.unregister.request"

	// Publish on event broker
	c.logInfo("Publishing to channel", "channel", path, "operation", "publish", "message", msg)
	return c.brokerController.Publish(path, um)
}

// WaitForCryptellationTicksRegisterResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForCryptellationTicksRegisterResponse(ctx context.Context, publishMsg MessageWithCorrelationID, pub func() error) (RegisteringResponseMessage, error) {
	// Get channel path
	path := "cryptellation.ticks.register.response"

	// Subscribe to broker channel
	cc.logInfo("Wait for response", "channel", path, "operation", "wait-for", "correlation-id", publishMsg.CorrelationID())
	msgs, stop, err := cc.brokerController.Subscribe(path)
	if err != nil {
		cc.logError(err.Error(), "channel", path, "operation", "wait-for")
		return RegisteringResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	cc.logInfo("Sending request", "channel", path, "operation", "wait-for", "message", publishMsg, "correlation-id", publishMsg.CorrelationID())
	if err := pub(); err != nil {
		return RegisteringResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:
			// Get new message
			msg, err := newRegisteringResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.logError(err.Error(), "channel", path, "operation", "wait-for")
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil && publishMsg.CorrelationID() == msg.CorrelationID() {
				cc.logInfo("Received expected message", "channel", path, "operation", "wait-for", "message", msg, "correlation-id", msg.CorrelationID())
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				cc.logError("Channel closed before getting message", "channel", path, "operation", "wait-for", "correlation-id", publishMsg.CorrelationID())
				return RegisteringResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			cc.logError("Context done before getting message", "channel", path, "operation", "wait-for", "correlation-id", publishMsg.CorrelationID())
			return RegisteringResponseMessage{}, ErrContextCanceled
		}
	}
}

// WaitForCryptellationTicksUnregisterResponse will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForCryptellationTicksUnregisterResponse(ctx context.Context, publishMsg MessageWithCorrelationID, pub func() error) (RegisteringResponseMessage, error) {
	// Get channel path
	path := "cryptellation.ticks.unregister.response"

	// Subscribe to broker channel
	cc.logInfo("Wait for response", "channel", path, "operation", "wait-for", "correlation-id", publishMsg.CorrelationID())
	msgs, stop, err := cc.brokerController.Subscribe(path)
	if err != nil {
		cc.logError(err.Error(), "channel", path, "operation", "wait-for")
		return RegisteringResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	cc.logInfo("Sending request", "channel", path, "operation", "wait-for", "message", publishMsg, "correlation-id", publishMsg.CorrelationID())
	if err := pub(); err != nil {
		return RegisteringResponseMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um, open := <-msgs:
			// Get new message
			msg, err := newRegisteringResponseMessageFromUniversalMessage(um)
			if err != nil {
				cc.logError(err.Error(), "channel", path, "operation", "wait-for")
			}

			// If valid message with corresponding correlation ID, return message
			if err == nil && publishMsg.CorrelationID() == msg.CorrelationID() {
				cc.logInfo("Received expected message", "channel", path, "operation", "wait-for", "message", msg, "correlation-id", msg.CorrelationID())
				return msg, nil
			} else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
				cc.logError("Channel closed before getting message", "channel", path, "operation", "wait-for", "correlation-id", publishMsg.CorrelationID())
				return RegisteringResponseMessage{}, ErrSubscriptionCanceled
			}
		case <-ctx.Done(): // Return error if context is done
			cc.logError("Context done before getting message", "channel", path, "operation", "wait-for", "correlation-id", publishMsg.CorrelationID())
			return RegisteringResponseMessage{}, ErrContextCanceled
		}
	}
}
