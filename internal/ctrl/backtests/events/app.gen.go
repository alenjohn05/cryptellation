// Package "events" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version v0.16.0 DO NOT EDIT.
package events

import (
	"context"
	"fmt"

	aapiContext "github.com/lerenn/asyncapi-codegen/pkg/context"
	"github.com/lerenn/asyncapi-codegen/pkg/log"
)

// AppSubscriber represents all handlers that are expecting messages for App
type AppSubscriber interface {
	// CryptellationBacktestsAccountsListRequest
	CryptellationBacktestsAccountsListRequest(ctx context.Context, msg BacktestsAccountsListRequestMessage, done bool)

	// CryptellationBacktestsAdvanceRequest
	CryptellationBacktestsAdvanceRequest(ctx context.Context, msg BacktestsAdvanceRequestMessage, done bool)

	// CryptellationBacktestsCreateRequest
	CryptellationBacktestsCreateRequest(ctx context.Context, msg BacktestsCreateRequestMessage, done bool)

	// CryptellationBacktestsOrdersCreateRequest
	CryptellationBacktestsOrdersCreateRequest(ctx context.Context, msg BacktestsOrdersCreateRequestMessage, done bool)

	// CryptellationBacktestsOrdersListRequest
	CryptellationBacktestsOrdersListRequest(ctx context.Context, msg BacktestsOrdersListRequestMessage, done bool)

	// CryptellationBacktestsSubscribeRequest
	CryptellationBacktestsSubscribeRequest(ctx context.Context, msg BacktestsSubscribeRequestMessage, done bool)
}

// AppController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the App
type AppController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
	logger           log.Logger
}

// NewAppController links the App to the broker
func NewAppController(bs BrokerController) (*AppController, error) {
	if bs == nil {
		return nil, ErrNilBrokerController
	}

	return &AppController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
		logger:           log.Silent{},
	}, nil
}

// SetLogger attaches a logger that will log operations on controller
func (c *AppController) SetLogger(logger log.Logger) {
	c.logger = logger
	c.brokerController.SetLogger(logger)
}

func addAppContextValues(ctx context.Context, path, operation string) context.Context {
	ctx = context.WithValue(ctx, aapiContext.KeyIsModule, "asyncapi")
	ctx = context.WithValue(ctx, aapiContext.KeyIsProvider, "app")
	ctx = context.WithValue(ctx, aapiContext.KeyIsAction, path)
	return context.WithValue(ctx, aapiContext.KeyIsOperation, operation)
}

// Close will clean up any existing resources on the controller
func (c *AppController) Close(ctx context.Context) {
	// Unsubscribing remaining channels
	c.logger.Info(ctx, "Closing App controller")
	c.UnsubscribeAll(ctx)
}

// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *AppController) SubscribeAll(ctx context.Context, as AppSubscriber) error {
	if as == nil {
		return ErrNilAppSubscriber
	}

	if err := c.SubscribeCryptellationBacktestsAccountsListRequest(ctx, as.CryptellationBacktestsAccountsListRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsAdvanceRequest(ctx, as.CryptellationBacktestsAdvanceRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsCreateRequest(ctx, as.CryptellationBacktestsCreateRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsOrdersCreateRequest(ctx, as.CryptellationBacktestsOrdersCreateRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsOrdersListRequest(ctx, as.CryptellationBacktestsOrdersListRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsSubscribeRequest(ctx, as.CryptellationBacktestsSubscribeRequest); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *AppController) UnsubscribeAll(ctx context.Context) {
	// Unsubscribe channels with no parameters (if any)
	c.UnsubscribeCryptellationBacktestsAccountsListRequest(ctx)
	c.UnsubscribeCryptellationBacktestsAdvanceRequest(ctx)
	c.UnsubscribeCryptellationBacktestsCreateRequest(ctx)
	c.UnsubscribeCryptellationBacktestsOrdersCreateRequest(ctx)
	c.UnsubscribeCryptellationBacktestsOrdersListRequest(ctx)
	c.UnsubscribeCryptellationBacktestsSubscribeRequest(ctx)

	// Unsubscribe remaining channels
	for n, stopChan := range c.stopSubscribers {
		stopChan <- true
		delete(c.stopSubscribers, n)
	}
}

// SubscribeCryptellationBacktestsAccountsListRequest will subscribe to new messages from 'cryptellation.backtests.accounts.list.request' channel.
//
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeCryptellationBacktestsAccountsListRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsAccountsListRequestMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.backtests.accounts.list.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsAccountsListRequestMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationBacktestsAccountsListRequest will unsubscribe messages from 'cryptellation.backtests.accounts.list.request' channel
func (c *AppController) UnsubscribeCryptellationBacktestsAccountsListRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.accounts.list.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationBacktestsAdvanceRequest will subscribe to new messages from 'cryptellation.backtests.advance.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeCryptellationBacktestsAdvanceRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsAdvanceRequestMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.backtests.advance.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsAdvanceRequestMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationBacktestsAdvanceRequest will unsubscribe messages from 'cryptellation.backtests.advance.request' channel
func (c *AppController) UnsubscribeCryptellationBacktestsAdvanceRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.advance.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationBacktestsCreateRequest will subscribe to new messages from 'cryptellation.backtests.create.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeCryptellationBacktestsCreateRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsCreateRequestMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.backtests.create.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsCreateRequestMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationBacktestsCreateRequest will unsubscribe messages from 'cryptellation.backtests.create.request' channel
func (c *AppController) UnsubscribeCryptellationBacktestsCreateRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.create.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationBacktestsOrdersCreateRequest will subscribe to new messages from 'cryptellation.backtests.orders.create.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeCryptellationBacktestsOrdersCreateRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsOrdersCreateRequestMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.backtests.orders.create.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsOrdersCreateRequestMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationBacktestsOrdersCreateRequest will unsubscribe messages from 'cryptellation.backtests.orders.create.request' channel
func (c *AppController) UnsubscribeCryptellationBacktestsOrdersCreateRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.orders.create.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationBacktestsOrdersListRequest will subscribe to new messages from 'cryptellation.backtests.orders.list.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeCryptellationBacktestsOrdersListRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsOrdersListRequestMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.backtests.orders.list.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsOrdersListRequestMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationBacktestsOrdersListRequest will unsubscribe messages from 'cryptellation.backtests.orders.list.request' channel
func (c *AppController) UnsubscribeCryptellationBacktestsOrdersListRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.orders.list.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
} // SubscribeCryptellationBacktestsSubscribeRequest will subscribe to new messages from 'cryptellation.backtests.subscribe.request' channel.
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
func (c *AppController) SubscribeCryptellationBacktestsSubscribeRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsSubscribeRequestMessage, done bool)) error {
	// Get channel path
	path := "cryptellation.backtests.subscribe.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "subscribe")

	// Check if there is already a subscription
	_, exists := c.stopSubscribers[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	c.logger.Info(ctx, "Subscribing to channel")
	msgs, stop, err := c.brokerController.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			um, open := <-msgs

			// Process message
			msg, err := newBacktestsSubscribeRequestMessageFromUniversalMessage(um)
			if err != nil {
				ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, um)
				c.logger.Error(ctx, err.Error())
			}
			ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

			// Send info if message is correct or susbcription is closed
			if err == nil || !open {
				c.logger.Info(ctx, "Received new message")
				fn(ctx, msg, !open)
			}

			// If subscription is closed, then exit the function
			if !open {
				return
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers[path] = stop

	return nil
}

// UnsubscribeCryptellationBacktestsSubscribeRequest will unsubscribe messages from 'cryptellation.backtests.subscribe.request' channel
func (c *AppController) UnsubscribeCryptellationBacktestsSubscribeRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.subscribe.request"

	// Set context
	ctx = addAppContextValues(ctx, path, "unsubscribe")

	// Get stop channel
	stopChan, exists := c.stopSubscribers[path]
	if !exists {
		return
	}

	// Stop the channel and remove the entry
	c.logger.Info(ctx, "Unsubscribing from channel")
	stopChan <- true
	delete(c.stopSubscribers, path)
}

// PublishCryptellationBacktestsAccountsListResponse will publish messages to 'cryptellation.backtests.accounts.list.response' channel
func (c *AppController) PublishCryptellationBacktestsAccountsListResponse(ctx context.Context, msg BacktestsAccountsListResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.accounts.list.response"

	// Set context
	ctx = addAppContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}

// PublishCryptellationBacktestsAdvanceResponse will publish messages to 'cryptellation.backtests.advance.response' channel
func (c *AppController) PublishCryptellationBacktestsAdvanceResponse(ctx context.Context, msg BacktestsAdvanceResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.advance.response"

	// Set context
	ctx = addAppContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}

// PublishCryptellationBacktestsCreateResponse will publish messages to 'cryptellation.backtests.create.response' channel
func (c *AppController) PublishCryptellationBacktestsCreateResponse(ctx context.Context, msg BacktestsCreateResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.create.response"

	// Set context
	ctx = addAppContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}

// PublishCryptellationBacktestsEventsID will publish messages to 'cryptellation.backtests.events.{id}' channel
func (c *AppController) PublishCryptellationBacktestsEventsID(ctx context.Context, params CryptellationBacktestsEventsIDParameters, msg BacktestsEventMessage) error {
	// Get channel path
	path := fmt.Sprintf("cryptellation.backtests.events.%v", params.ID)

	// Set context
	ctx = addAppContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}

// PublishCryptellationBacktestsOrdersCreateResponse will publish messages to 'cryptellation.backtests.orders.create.response' channel
func (c *AppController) PublishCryptellationBacktestsOrdersCreateResponse(ctx context.Context, msg BacktestsOrdersCreateResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.orders.create.response"

	// Set context
	ctx = addAppContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}

// PublishCryptellationBacktestsOrdersListResponse will publish messages to 'cryptellation.backtests.orders.list.response' channel
func (c *AppController) PublishCryptellationBacktestsOrdersListResponse(ctx context.Context, msg BacktestsOrdersListResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.orders.list.response"

	// Set context
	ctx = addAppContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}

// PublishCryptellationBacktestsSubscribeResponse will publish messages to 'cryptellation.backtests.subscribe.response' channel
func (c *AppController) PublishCryptellationBacktestsSubscribeResponse(ctx context.Context, msg BacktestsSubscribeResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.subscribe.response"

	// Set context
	ctx = addAppContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")
	return c.brokerController.Publish(ctx, path, um)
}
