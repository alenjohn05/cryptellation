// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pairs.proto

package pairs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PairsServiceClient is the client API for PairsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PairsServiceClient interface {
	CreatePairs(ctx context.Context, in *CreatePairsRequest, opts ...grpc.CallOption) (*CreatePairsResponse, error)
	ReadPairs(ctx context.Context, in *ReadPairsRequest, opts ...grpc.CallOption) (*ReadPairsResponse, error)
}

type pairsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPairsServiceClient(cc grpc.ClientConnInterface) PairsServiceClient {
	return &pairsServiceClient{cc}
}

func (c *pairsServiceClient) CreatePairs(ctx context.Context, in *CreatePairsRequest, opts ...grpc.CallOption) (*CreatePairsResponse, error) {
	out := new(CreatePairsResponse)
	err := c.cc.Invoke(ctx, "/pairs.PairsService/CreatePairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairsServiceClient) ReadPairs(ctx context.Context, in *ReadPairsRequest, opts ...grpc.CallOption) (*ReadPairsResponse, error) {
	out := new(ReadPairsResponse)
	err := c.cc.Invoke(ctx, "/pairs.PairsService/ReadPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PairsServiceServer is the server API for PairsService service.
// All implementations should embed UnimplementedPairsServiceServer
// for forward compatibility
type PairsServiceServer interface {
	CreatePairs(context.Context, *CreatePairsRequest) (*CreatePairsResponse, error)
	ReadPairs(context.Context, *ReadPairsRequest) (*ReadPairsResponse, error)
}

// UnimplementedPairsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPairsServiceServer struct {
}

func (UnimplementedPairsServiceServer) CreatePairs(context.Context, *CreatePairsRequest) (*CreatePairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePairs not implemented")
}
func (UnimplementedPairsServiceServer) ReadPairs(context.Context, *ReadPairsRequest) (*ReadPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPairs not implemented")
}

// UnsafePairsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PairsServiceServer will
// result in compilation errors.
type UnsafePairsServiceServer interface {
	mustEmbedUnimplementedPairsServiceServer()
}

func RegisterPairsServiceServer(s grpc.ServiceRegistrar, srv PairsServiceServer) {
	s.RegisterService(&PairsService_ServiceDesc, srv)
}

func _PairsService_CreatePairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairsServiceServer).CreatePairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairs.PairsService/CreatePairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairsServiceServer).CreatePairs(ctx, req.(*CreatePairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairsService_ReadPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairsServiceServer).ReadPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pairs.PairsService/ReadPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairsServiceServer).ReadPairs(ctx, req.(*ReadPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PairsService_ServiceDesc is the grpc.ServiceDesc for PairsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PairsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pairs.PairsService",
	HandlerType: (*PairsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePairs",
			Handler:    _PairsService_CreatePairs_Handler,
		},
		{
			MethodName: "ReadPairs",
			Handler:    _PairsService_ReadPairs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pairs.proto",
}
