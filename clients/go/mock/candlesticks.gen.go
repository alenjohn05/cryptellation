// Code generated by MockGen. DO NOT EDIT.
// Source: candlesticks.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	client "github.com/lerenn/cryptellation/clients/go"
	candlestick "github.com/lerenn/cryptellation/pkg/models/candlestick"
	gomock "go.uber.org/mock/gomock"
)

// MockCandlesticks is a mock of Candlesticks interface.
type MockCandlesticks struct {
	ctrl     *gomock.Controller
	recorder *MockCandlesticksMockRecorder
}

// MockCandlesticksMockRecorder is the mock recorder for MockCandlesticks.
type MockCandlesticksMockRecorder struct {
	mock *MockCandlesticks
}

// NewMockCandlesticks creates a new mock instance.
func NewMockCandlesticks(ctrl *gomock.Controller) *MockCandlesticks {
	mock := &MockCandlesticks{ctrl: ctrl}
	mock.recorder = &MockCandlesticksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCandlesticks) EXPECT() *MockCandlesticksMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCandlesticks) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockCandlesticksMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCandlesticks)(nil).Close), ctx)
}

// Read mocks base method.
func (m *MockCandlesticks) Read(ctx context.Context, payload client.ReadCandlesticksPayload) (*candlestick.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, payload)
	ret0, _ := ret[0].(*candlestick.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCandlesticksMockRecorder) Read(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCandlesticks)(nil).Read), ctx, payload)
}

// ServiceInfo mocks base method.
func (m *MockCandlesticks) ServiceInfo(ctx context.Context) (client.ServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceInfo", ctx)
	ret0, _ := ret[0].(client.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceInfo indicates an expected call of ServiceInfo.
func (mr *MockCandlesticksMockRecorder) ServiceInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInfo", reflect.TypeOf((*MockCandlesticks)(nil).ServiceInfo), ctx)
}
