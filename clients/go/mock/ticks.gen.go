// Code generated by MockGen. DO NOT EDIT.
// Source: ticks.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	client "github.com/lerenn/cryptellation/clients/go"
	tick "github.com/lerenn/cryptellation/pkg/tick"
	gomock "github.com/golang/mock/gomock"
)

// MockTicks is a mock of Ticks interface.
type MockTicks struct {
	ctrl     *gomock.Controller
	recorder *MockTicksMockRecorder
}

// MockTicksMockRecorder is the mock recorder for MockTicks.
type MockTicksMockRecorder struct {
	mock *MockTicks
}

// NewMockTicks creates a new mock instance.
func NewMockTicks(ctrl *gomock.Controller) *MockTicks {
	mock := &MockTicks{ctrl: ctrl}
	mock.recorder = &MockTicksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicks) EXPECT() *MockTicksMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTicks) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTicksMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTicks)(nil).Close))
}

// Listen mocks base method.
func (m *MockTicks) Listen(ctx context.Context, payload client.TicksFilterPayload) (<-chan tick.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", ctx, payload)
	ret0, _ := ret[0].(<-chan tick.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockTicksMockRecorder) Listen(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockTicks)(nil).Listen), ctx, payload)
}

// Register mocks base method.
func (m *MockTicks) Register(ctx context.Context, payload client.TicksFilterPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockTicksMockRecorder) Register(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTicks)(nil).Register), ctx, payload)
}

// Unregister mocks base method.
func (m *MockTicks) Unregister(ctx context.Context, payload client.TicksFilterPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockTicksMockRecorder) Unregister(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockTicks)(nil).Unregister), ctx, payload)
}
