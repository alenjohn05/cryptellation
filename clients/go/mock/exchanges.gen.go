// Code generated by MockGen. DO NOT EDIT.
// Source: exchanges.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	exchange "github.com/lerenn/cryptellation/pkg/exchange"
	gomock "github.com/golang/mock/gomock"
)

// MockExchanges is a mock of Exchanges interface.
type MockExchanges struct {
	ctrl     *gomock.Controller
	recorder *MockExchangesMockRecorder
}

// MockExchangesMockRecorder is the mock recorder for MockExchanges.
type MockExchangesMockRecorder struct {
	mock *MockExchanges
}

// NewMockExchanges creates a new mock instance.
func NewMockExchanges(ctrl *gomock.Controller) *MockExchanges {
	mock := &MockExchanges{ctrl: ctrl}
	mock.recorder = &MockExchangesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchanges) EXPECT() *MockExchangesMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockExchanges) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockExchangesMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExchanges)(nil).Close))
}

// Read mocks base method.
func (m *MockExchanges) Read(ctx context.Context, names ...string) ([]exchange.Exchange, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].([]exchange.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockExchangesMockRecorder) Read(ctx interface{}, names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockExchanges)(nil).Read), varargs...)
}
