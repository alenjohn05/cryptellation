// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package backtests is a generated GoMock package.
package backtests

import (
	context "context"
	reflect "reflect"

	client "github.com/digital-feather/cryptellation/services/candlesticks/pkg/client"
	candlestick "github.com/digital-feather/cryptellation/services/candlesticks/pkg/models/candlestick"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ReadCandlesticks mocks base method.
func (m *MockClient) ReadCandlesticks(ctx context.Context, payload client.ReadCandlestickPayload) (*candlestick.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCandlesticks", ctx, payload)
	ret0, _ := ret[0].(*candlestick.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCandlesticks indicates an expected call of ReadCandlesticks.
func (mr *MockClientMockRecorder) ReadCandlesticks(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCandlesticks", reflect.TypeOf((*MockClient)(nil).ReadCandlesticks), ctx, payload)
}
