// Code generated by MockGen. DO NOT EDIT.
// Source: interfacer.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"
	time "time"

	account "github.com/digital-feather/cryptellation/services/backtests/pkg/models/account"
	event "github.com/digital-feather/cryptellation/services/backtests/pkg/models/event"
	order "github.com/digital-feather/cryptellation/services/backtests/pkg/models/order"
	gomock "github.com/golang/mock/gomock"
)

// MockInterfacer is a mock of Interfacer interface.
type MockInterfacer struct {
	ctrl     *gomock.Controller
	recorder *MockInterfacerMockRecorder
}

// MockInterfacerMockRecorder is the mock recorder for MockInterfacer.
type MockInterfacerMockRecorder struct {
	mock *MockInterfacer
}

// NewMockInterfacer creates a new mock instance.
func NewMockInterfacer(ctrl *gomock.Controller) *MockInterfacer {
	mock := &MockInterfacer{ctrl: ctrl}
	mock.recorder = &MockInterfacerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfacer) EXPECT() *MockInterfacerMockRecorder {
	return m.recorder
}

// AdvanceBacktest mocks base method.
func (m *MockInterfacer) AdvanceBacktest(ctx context.Context, backtestID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvanceBacktest", ctx, backtestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvanceBacktest indicates an expected call of AdvanceBacktest.
func (mr *MockInterfacerMockRecorder) AdvanceBacktest(ctx, backtestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceBacktest", reflect.TypeOf((*MockInterfacer)(nil).AdvanceBacktest), ctx, backtestID)
}

// BacktestAccounts mocks base method.
func (m *MockInterfacer) BacktestAccounts(ctx context.Context, backtestID uint64) (map[string]account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BacktestAccounts", ctx, backtestID)
	ret0, _ := ret[0].(map[string]account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BacktestAccounts indicates an expected call of BacktestAccounts.
func (mr *MockInterfacerMockRecorder) BacktestAccounts(ctx, backtestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BacktestAccounts", reflect.TypeOf((*MockInterfacer)(nil).BacktestAccounts), ctx, backtestID)
}

// BacktestOrders mocks base method.
func (m *MockInterfacer) BacktestOrders(ctx context.Context, backtestID uint64) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BacktestOrders", ctx, backtestID)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BacktestOrders indicates an expected call of BacktestOrders.
func (mr *MockInterfacerMockRecorder) BacktestOrders(ctx, backtestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BacktestOrders", reflect.TypeOf((*MockInterfacer)(nil).BacktestOrders), ctx, backtestID)
}

// CreateBacktest mocks base method.
func (m *MockInterfacer) CreateBacktest(ctx context.Context, start, end time.Time, accounts map[string]account.Account) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBacktest", ctx, start, end, accounts)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBacktest indicates an expected call of CreateBacktest.
func (mr *MockInterfacerMockRecorder) CreateBacktest(ctx, start, end, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBacktest", reflect.TypeOf((*MockInterfacer)(nil).CreateBacktest), ctx, start, end, accounts)
}

// CreateBacktestOrder mocks base method.
func (m *MockInterfacer) CreateBacktestOrder(ctx context.Context, backtestID uint64, o order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBacktestOrder", ctx, backtestID, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBacktestOrder indicates an expected call of CreateBacktestOrder.
func (mr *MockInterfacerMockRecorder) CreateBacktestOrder(ctx, backtestID, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBacktestOrder", reflect.TypeOf((*MockInterfacer)(nil).CreateBacktestOrder), ctx, backtestID, o)
}

// ListenBacktest mocks base method.
func (m *MockInterfacer) ListenBacktest(backtestID uint) (<-chan event.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenBacktest", backtestID)
	ret0, _ := ret[0].(<-chan event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenBacktest indicates an expected call of ListenBacktest.
func (mr *MockInterfacerMockRecorder) ListenBacktest(backtestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenBacktest", reflect.TypeOf((*MockInterfacer)(nil).ListenBacktest), backtestID)
}

// SubscribeToBacktestEvents mocks base method.
func (m *MockInterfacer) SubscribeToBacktestEvents(ctx context.Context, backtestID uint64, exchangeName, pairSymbol string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToBacktestEvents", ctx, backtestID, exchangeName, pairSymbol)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToBacktestEvents indicates an expected call of SubscribeToBacktestEvents.
func (mr *MockInterfacerMockRecorder) SubscribeToBacktestEvents(ctx, backtestID, exchangeName, pairSymbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToBacktestEvents", reflect.TypeOf((*MockInterfacer)(nil).SubscribeToBacktestEvents), ctx, backtestID, exchangeName, pairSymbol)
}
