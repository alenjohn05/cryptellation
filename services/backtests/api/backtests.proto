syntax = "proto3";

option go_package = "/services/backtests/pkg/grpc/proto";

package backtests;

service BacktestsService {
    rpc CreateBacktest(CreateBacktestRequest) returns (CreateBacktestResponse) {}
    rpc SubscribeToBacktestEvents(SubscribeToBacktestEventsRequest) returns (SubscribeToBacktestEventsResponse){}
    rpc AdvanceBacktest(AdvanceBacktestRequest) returns (AdvanceBacktestResponse) {}
    rpc CreateBacktestOrder(CreateBacktestOrderRequest) returns (CreateBacktestOrderResponse) {}
    rpc BacktestAccounts(BacktestAccountsRequest) returns (BacktestAccountsResponse) {}
    rpc BacktestOrders(BacktestOrdersRequest) returns (BacktestOrdersResponse) {}
}

message Account {
    map<string, float> assets = 1;
}

message CreateBacktestRequest {
    map<string, Account> accounts = 1;
	string start_time = 2;
	string end_time = 3;
    uint64 seconds_between_price_events = 4;
}

message CreateBacktestResponse {
    uint64 id = 1;
}

message SubscribeToBacktestEventsRequest {
    uint64 id = 1;
    string exchange_name = 2;
    string pair_symbol = 3;
}

message SubscribeToBacktestEventsResponse{
}

message AdvanceBacktestRequest {
    uint64 id = 1;
}

message AdvanceBacktestResponse {
}

message BacktestEvent {
    string type = 1;
    string time = 2;
    string content = 3;
}

message CreateBacktestOrderRequest {
    uint64 backtest_id = 1;
    Order order = 2;
}

message CreateBacktestOrderResponse {
}

message BacktestAccountsRequest {
    uint64 backtest_id = 1;
}

message BacktestAccountsResponse {
    map<string, Account> accounts = 1;
}

message BacktestOrdersRequest {
    uint64 backtest_id = 1;
}

message Order {
    uint64 id = 1;
    optional string execution_time = 2;
    string type = 3;
    string exchange_name = 4;
    string pair_symbol = 5;
    string side = 6;
    float quantity = 7;
    float price = 8;
}

message BacktestOrdersResponse {
    repeated Order orders = 1;
}
