// Code generated by MockGen. DO NOT EDIT.
// Source: interfacer.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	tick "github.com/digital-feather/cryptellation/services/ticks/pkg/models/tick"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterfacer is a mock of Interfacer interface
type MockInterfacer struct {
	ctrl     *gomock.Controller
	recorder *MockInterfacerMockRecorder
}

// MockInterfacerMockRecorder is the mock recorder for MockInterfacer
type MockInterfacerMockRecorder struct {
	mock *MockInterfacer
}

// NewMockInterfacer creates a new mock instance
func NewMockInterfacer(ctrl *gomock.Controller) *MockInterfacer {
	mock := &MockInterfacer{ctrl: ctrl}
	mock.recorder = &MockInterfacerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterfacer) EXPECT() *MockInterfacerMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockInterfacer) Register(ctx context.Context, exchange, symbol string) error {
	ret := m.ctrl.Call(m, "Register", ctx, exchange, symbol)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockInterfacerMockRecorder) Register(ctx, exchange, symbol interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockInterfacer)(nil).Register), ctx, exchange, symbol)
}

// Unregister mocks base method
func (m *MockInterfacer) Unregister(ctx context.Context, exchange, symbol string) error {
	ret := m.ctrl.Call(m, "Unregister", ctx, exchange, symbol)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister
func (mr *MockInterfacerMockRecorder) Unregister(ctx, exchange, symbol interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockInterfacer)(nil).Unregister), ctx, exchange, symbol)
}

// Listen mocks base method
func (m *MockInterfacer) Listen(symbol string) (<-chan tick.Tick, error) {
	ret := m.ctrl.Call(m, "Listen", symbol)
	ret0, _ := ret[0].(<-chan tick.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen
func (mr *MockInterfacerMockRecorder) Listen(symbol interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockInterfacer)(nil).Listen), symbol)
}
