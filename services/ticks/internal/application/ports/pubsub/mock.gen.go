// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go

// Package pubsub is a generated GoMock package.
package pubsub

import (
	reflect "reflect"

	tick "github.com/digital-feather/cryptellation/services/ticks/pkg/models/tick"
	gomock "github.com/golang/mock/gomock"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAdapter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAdapter)(nil).Close))
}

// Publish mocks base method.
func (m *MockAdapter) Publish(tick tick.Tick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", tick)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockAdapterMockRecorder) Publish(tick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAdapter)(nil).Publish), tick)
}

// Subscribe mocks base method.
func (m *MockAdapter) Subscribe(symbol string) (<-chan tick.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", symbol)
	ret0, _ := ret[0].(<-chan tick.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockAdapterMockRecorder) Subscribe(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAdapter)(nil).Subscribe), symbol)
}
