// Code generated by MockGen. DO NOT EDIT.
// Source: interfacer.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	exchange "github.com/digital-feather/cryptellation/services/exchanges/pkg/models/exchange"
	gomock "github.com/golang/mock/gomock"
)

// MockInterfacer is a mock of Interfacer interface.
type MockInterfacer struct {
	ctrl     *gomock.Controller
	recorder *MockInterfacerMockRecorder
}

// MockInterfacerMockRecorder is the mock recorder for MockInterfacer.
type MockInterfacerMockRecorder struct {
	mock *MockInterfacer
}

// NewMockInterfacer creates a new mock instance.
func NewMockInterfacer(ctrl *gomock.Controller) *MockInterfacer {
	mock := &MockInterfacer{ctrl: ctrl}
	mock.recorder = &MockInterfacerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfacer) EXPECT() *MockInterfacerMockRecorder {
	return m.recorder
}

// ReadExchanges mocks base method.
func (m *MockInterfacer) ReadExchanges(ctx context.Context, names ...string) ([]exchange.Exchange, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadExchanges", varargs...)
	ret0, _ := ret[0].([]exchange.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadExchanges indicates an expected call of ReadExchanges.
func (mr *MockInterfacerMockRecorder) ReadExchanges(ctx interface{}, names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadExchanges", reflect.TypeOf((*MockInterfacer)(nil).ReadExchanges), varargs...)
}
