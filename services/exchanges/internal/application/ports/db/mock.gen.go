// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	exchange "github.com/digital-feather/cryptellation/services/exchanges/pkg/models/exchange"
	gomock "github.com/golang/mock/gomock"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// CreateExchanges mocks base method.
func (m *MockAdapter) CreateExchanges(ctx context.Context, exchanges ...exchange.Exchange) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range exchanges {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExchanges", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExchanges indicates an expected call of CreateExchanges.
func (mr *MockAdapterMockRecorder) CreateExchanges(ctx interface{}, exchanges ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, exchanges...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchanges", reflect.TypeOf((*MockAdapter)(nil).CreateExchanges), varargs...)
}

// DeleteExchanges mocks base method.
func (m *MockAdapter) DeleteExchanges(ctx context.Context, names ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExchanges", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExchanges indicates an expected call of DeleteExchanges.
func (mr *MockAdapterMockRecorder) DeleteExchanges(ctx interface{}, names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchanges", reflect.TypeOf((*MockAdapter)(nil).DeleteExchanges), varargs...)
}

// ReadExchanges mocks base method.
func (m *MockAdapter) ReadExchanges(ctx context.Context, names ...string) ([]exchange.Exchange, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadExchanges", varargs...)
	ret0, _ := ret[0].([]exchange.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadExchanges indicates an expected call of ReadExchanges.
func (mr *MockAdapterMockRecorder) ReadExchanges(ctx interface{}, names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadExchanges", reflect.TypeOf((*MockAdapter)(nil).ReadExchanges), varargs...)
}

// UpdateExchanges mocks base method.
func (m *MockAdapter) UpdateExchanges(ctx context.Context, exchanges ...exchange.Exchange) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range exchanges {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExchanges", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExchanges indicates an expected call of UpdateExchanges.
func (mr *MockAdapterMockRecorder) UpdateExchanges(ctx interface{}, exchanges ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, exchanges...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchanges", reflect.TypeOf((*MockAdapter)(nil).UpdateExchanges), varargs...)
}
