// Package "ticks" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version v0.26.0 DO NOT EDIT.
package ticks

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/lerenn/asyncapi-codegen/pkg/extensions"

	"github.com/google/uuid"
)

// controller is the controller that will be used to communicate with the broker
// It will be used internally by AppController and UserController
type controller struct {
	// broker is the broker controller that will be used to communicate
	broker extensions.BrokerController
	// subscriptions is a map of all subscriptions
	subscriptions map[string]extensions.BrokerChannelSubscription
	// logger is the logger that will be usedÂ² to log operations on controller
	logger extensions.Logger
	// middlewares are the middlewares that will be executed when sending or
	// receiving messages
	middlewares []extensions.Middleware
}

// ControllerOption is the type of the options that can be passed
// when creating a new Controller
type ControllerOption func(controller *controller)

// WithLogger attaches a logger to the controller
func WithLogger(logger extensions.Logger) ControllerOption {
	return func(controller *controller) {
		controller.logger = logger
	}
}

// WithMiddlewares attaches middlewares that will be executed when sending or receiving messages
func WithMiddlewares(middlewares ...extensions.Middleware) ControllerOption {
	return func(controller *controller) {
		controller.middlewares = middlewares
	}
}

type MessageWithCorrelationID interface {
	CorrelationID() string
	SetCorrelationID(id string)
}

type Error struct {
	Channel string
	Err     error
}

func (e *Error) Error() string {
	return fmt.Sprintf("channel %q: err %v", e.Channel, e.Err)
}

// CryptellationTicksListenExchangePairParameters represents CryptellationTicksListenExchangePair channel parameters
type CryptellationTicksListenExchangePairParameters struct {
	// Description: Filter for ticks by exchange name
	Exchange ExchangeNameSchema
	// Description: Filter for ticks by pair symbol
	Pair PairSymbolSchema
}

// RegisteringRequestMessage is the message expected for 'RegisteringRequest' channel
type RegisteringRequestMessage struct {
	// Headers will be used to fill the message headers
	Headers struct {
		// Description: Correlation ID set by client
		CorrelationID *string `json:"correlation_id"`
	}

	// Payload will be inserted in the message payload
	Payload struct {
		// Description: Exchange name
		Exchange ExchangeNameSchema `json:"exchange"`

		// Description: Pair symbol
		Pair PairSymbolSchema `json:"pair"`
	}
}

func NewRegisteringRequestMessage() RegisteringRequestMessage {
	var msg RegisteringRequestMessage

	// Set correlation ID
	u := uuid.New().String()
	msg.Headers.CorrelationID = &u

	return msg
}

// newRegisteringRequestMessageFromBrokerMessage will fill a new RegisteringRequestMessage with data from generic broker message
func newRegisteringRequestMessageFromBrokerMessage(bMsg extensions.BrokerMessage) (RegisteringRequestMessage, error) {
	var msg RegisteringRequestMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// Get each headers from broker message
	for k, v := range bMsg.Headers {
		switch {
		case k == "correlationId": // Retrieving CorrelationID header
			h := string(v)
			msg.Headers.CorrelationID = &h
		default:
			// TODO: log unknown error
		}
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from RegisteringRequestMessage data
func (msg RegisteringRequestMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// Add each headers to broker message
	headers := make(map[string][]byte, 1)

	// Adding CorrelationID header
	if msg.Headers.CorrelationID != nil {
		headers["correlationId"] = []byte(*msg.Headers.CorrelationID)
	}

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// CorrelationID will give the correlation ID of the message, based on AsyncAPI spec
func (msg RegisteringRequestMessage) CorrelationID() string {
	if msg.Headers.CorrelationID != nil {
		return *msg.Headers.CorrelationID
	}

	return ""
}

// SetCorrelationID will set the correlation ID of the message, based on AsyncAPI spec
func (msg *RegisteringRequestMessage) SetCorrelationID(id string) {
	msg.Headers.CorrelationID = &id
}

// SetAsResponseFrom will correlate the message with the one passed in parameter.
// It will assign the 'req' message correlation ID to the message correlation ID,
// both specified in AsyncAPI spec.
func (msg *RegisteringRequestMessage) SetAsResponseFrom(req MessageWithCorrelationID) {
	id := req.CorrelationID()
	msg.Headers.CorrelationID = &id
}

// RegisteringResponseMessage is the message expected for 'RegisteringResponse' channel
type RegisteringResponseMessage struct {
	// Headers will be used to fill the message headers
	Headers struct {
		// Description: Correlation ID set by client
		CorrelationID *string `json:"correlation_id"`
	}

	// Payload will be inserted in the message payload
	Payload struct {
		// Description: count of listener after the call is complete
		Count *int64 `json:"count"`

		// Description: Response to a failed call
		Error *ErrorSchema `json:"error"`
	}
}

func NewRegisteringResponseMessage() RegisteringResponseMessage {
	var msg RegisteringResponseMessage

	// Set correlation ID
	u := uuid.New().String()
	msg.Headers.CorrelationID = &u

	return msg
}

// newRegisteringResponseMessageFromBrokerMessage will fill a new RegisteringResponseMessage with data from generic broker message
func newRegisteringResponseMessageFromBrokerMessage(bMsg extensions.BrokerMessage) (RegisteringResponseMessage, error) {
	var msg RegisteringResponseMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// Get each headers from broker message
	for k, v := range bMsg.Headers {
		switch {
		case k == "correlationId": // Retrieving CorrelationID header
			h := string(v)
			msg.Headers.CorrelationID = &h
		default:
			// TODO: log unknown error
		}
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from RegisteringResponseMessage data
func (msg RegisteringResponseMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// Add each headers to broker message
	headers := make(map[string][]byte, 1)

	// Adding CorrelationID header
	if msg.Headers.CorrelationID != nil {
		headers["correlationId"] = []byte(*msg.Headers.CorrelationID)
	}

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// CorrelationID will give the correlation ID of the message, based on AsyncAPI spec
func (msg RegisteringResponseMessage) CorrelationID() string {
	if msg.Headers.CorrelationID != nil {
		return *msg.Headers.CorrelationID
	}

	return ""
}

// SetCorrelationID will set the correlation ID of the message, based on AsyncAPI spec
func (msg *RegisteringResponseMessage) SetCorrelationID(id string) {
	msg.Headers.CorrelationID = &id
}

// SetAsResponseFrom will correlate the message with the one passed in parameter.
// It will assign the 'req' message correlation ID to the message correlation ID,
// both specified in AsyncAPI spec.
func (msg *RegisteringResponseMessage) SetAsResponseFrom(req MessageWithCorrelationID) {
	id := req.CorrelationID()
	msg.Headers.CorrelationID = &id
}

// TickMessage is the message expected for 'Tick' channel
type TickMessage struct {
	// Payload will be inserted in the message payload
	Payload TickSchema
}

func NewTickMessage() TickMessage {
	var msg TickMessage

	return msg
}

// newTickMessageFromBrokerMessage will fill a new TickMessage with data from generic broker message
func newTickMessageFromBrokerMessage(bMsg extensions.BrokerMessage) (TickMessage, error) {
	var msg TickMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from TickMessage data
func (msg TickMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// There is no headers here
	headers := make(map[string][]byte, 0)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// DateSchema is a schema from the AsyncAPI specification required in messages
// Description: Date-Time format according to RFC3339
type DateSchema time.Time

// MarshalJSON will override the marshal as this is not a normal 'time.Time' type
func (t DateSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(time.Time(t))
}

// UnmarshalJSON will override the unmarshal as this is not a normal 'time.Time' type
func (t *DateSchema) UnmarshalJSON(data []byte) error {
	var timeFormat time.Time
	if err := json.Unmarshal(data, &timeFormat); err != nil {
		return err
	}

	*t = DateSchema(timeFormat)
	return nil
}

// ErrorSchema is a schema from the AsyncAPI specification required in messages
// Description: Response to a failed call
type ErrorSchema struct {
	// Description: Code to identify the error type, based on HTTP errors
	Code int64 `json:"code"`

	// Description: Main error reason
	Message string `json:"message"`
}

// ExchangeNameSchema is a schema from the AsyncAPI specification required in messages
// Description: Exchange name
type ExchangeNameSchema string

// PairSymbolSchema is a schema from the AsyncAPI specification required in messages
// Description: Pair symbol
type PairSymbolSchema string

// TickSchema is a schema from the AsyncAPI specification required in messages
type TickSchema struct {
	// Description: Exchange name
	Exchange ExchangeNameSchema `json:"exchange"`

	// Description: Pair symbol
	PairSymbol PairSymbolSchema `json:"pair_symbol"`

	// Description: Tick price
	Price float64 `json:"price"`

	// Description: Date-Time format according to RFC3339
	Time DateSchema `json:"time"`
}
