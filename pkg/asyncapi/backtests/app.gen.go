// Package "backtests" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version v0.26.0 DO NOT EDIT.
package backtests

import (
	"context"
	"fmt"

	"github.com/lerenn/asyncapi-codegen/pkg/extensions"

	"github.com/google/uuid"
)

// AppSubscriber represents all handlers that are expecting messages for App
type AppSubscriber interface {
	// CryptellationBacktestsAccountsListRequest subscribes to messages placed on the 'cryptellation.backtests.accounts.list.request' channel
	CryptellationBacktestsAccountsListRequest(ctx context.Context, msg BacktestsAccountsListRequestMessage)

	// CryptellationBacktestsAdvanceRequest subscribes to messages placed on the 'cryptellation.backtests.advance.request' channel
	CryptellationBacktestsAdvanceRequest(ctx context.Context, msg BacktestsAdvanceRequestMessage)

	// CryptellationBacktestsCreateRequest subscribes to messages placed on the 'cryptellation.backtests.create.request' channel
	CryptellationBacktestsCreateRequest(ctx context.Context, msg BacktestsCreateRequestMessage)

	// CryptellationBacktestsOrdersCreateRequest subscribes to messages placed on the 'cryptellation.backtests.orders.create.request' channel
	CryptellationBacktestsOrdersCreateRequest(ctx context.Context, msg BacktestsOrdersCreateRequestMessage)

	// CryptellationBacktestsOrdersListRequest subscribes to messages placed on the 'cryptellation.backtests.orders.list.request' channel
	CryptellationBacktestsOrdersListRequest(ctx context.Context, msg BacktestsOrdersListRequestMessage)

	// CryptellationBacktestsSubscribeRequest subscribes to messages placed on the 'cryptellation.backtests.subscribe.request' channel
	CryptellationBacktestsSubscribeRequest(ctx context.Context, msg BacktestsSubscribeRequestMessage)
}

// AppController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the App
type AppController struct {
	controller
}

// NewAppController links the App to the broker
func NewAppController(bc extensions.BrokerController, options ...ControllerOption) (*AppController, error) {
	// Check if broker controller has been provided
	if bc == nil {
		return nil, extensions.ErrNilBrokerController
	}

	// Create default controller
	controller := controller{
		broker:        bc,
		subscriptions: make(map[string]extensions.BrokerChannelSubscription),
		logger:        extensions.DummyLogger{},
		middlewares:   make([]extensions.Middleware, 0),
	}

	// Apply options
	for _, option := range options {
		option(&controller)
	}

	return &AppController{controller: controller}, nil
}

func (c AppController) wrapMiddlewares(
	middlewares []extensions.Middleware,
	callback extensions.NextMiddleware,
) func(ctx context.Context, msg *extensions.BrokerMessage) error {
	var called bool

	// If there is no more middleware
	if len(middlewares) == 0 {
		return func(ctx context.Context, msg *extensions.BrokerMessage) error {
			// Call the callback if it exists and it has not been called already
			if callback != nil && !called {
				called = true
				return callback(ctx)
			}

			// Nil can be returned, as the callback has already been called
			return nil
		}
	}

	// Get the next function to call from next middlewares or callback
	next := c.wrapMiddlewares(middlewares[1:], callback)

	// Wrap middleware into a check function that will call execute the middleware
	// and call the next wrapped middleware if the returned function has not been
	// called already
	return func(ctx context.Context, msg *extensions.BrokerMessage) error {
		// Call the middleware and the following if it has not been done already
		if !called {
			// Create the next call with the context and the message
			nextWithArgs := func(ctx context.Context) error {
				return next(ctx, msg)
			}

			// Call the middleware and register it as already called
			called = true
			if err := middlewares[0](ctx, msg, nextWithArgs); err != nil {
				return err
			}

			// If next has already been called in middleware, it should not be executed again
			return nextWithArgs(ctx)
		}

		// Nil can be returned, as the next middleware has already been called
		return nil
	}
}

func (c AppController) executeMiddlewares(ctx context.Context, msg *extensions.BrokerMessage, callback extensions.NextMiddleware) error {
	// Wrap middleware to have 'next' function when calling them
	wrapped := c.wrapMiddlewares(c.middlewares, callback)

	// Execute wrapped middlewares
	return wrapped(ctx, msg)
}

func addAppContextValues(ctx context.Context, path string) context.Context {
	ctx = context.WithValue(ctx, extensions.ContextKeyIsVersion, "1.0.0")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsProvider, "app")
	return context.WithValue(ctx, extensions.ContextKeyIsChannel, path)
}

// Close will clean up any existing resources on the controller
func (c *AppController) Close(ctx context.Context) {
	// Unsubscribing remaining channels
	c.UnsubscribeAll(ctx)

	c.logger.Info(ctx, "Closed app controller")
}

// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *AppController) SubscribeAll(ctx context.Context, as AppSubscriber) error {
	if as == nil {
		return extensions.ErrNilAppSubscriber
	}

	if err := c.SubscribeCryptellationBacktestsAccountsListRequest(ctx, as.CryptellationBacktestsAccountsListRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsAdvanceRequest(ctx, as.CryptellationBacktestsAdvanceRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsCreateRequest(ctx, as.CryptellationBacktestsCreateRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsOrdersCreateRequest(ctx, as.CryptellationBacktestsOrdersCreateRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsOrdersListRequest(ctx, as.CryptellationBacktestsOrdersListRequest); err != nil {
		return err
	}
	if err := c.SubscribeCryptellationBacktestsSubscribeRequest(ctx, as.CryptellationBacktestsSubscribeRequest); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *AppController) UnsubscribeAll(ctx context.Context) {
	c.UnsubscribeCryptellationBacktestsAccountsListRequest(ctx)
	c.UnsubscribeCryptellationBacktestsAdvanceRequest(ctx)
	c.UnsubscribeCryptellationBacktestsCreateRequest(ctx)
	c.UnsubscribeCryptellationBacktestsOrdersCreateRequest(ctx)
	c.UnsubscribeCryptellationBacktestsOrdersListRequest(ctx)
	c.UnsubscribeCryptellationBacktestsSubscribeRequest(ctx)
}

// SubscribeCryptellationBacktestsAccountsListRequest will subscribe to new messages from 'cryptellation.backtests.accounts.list.request' channel.
//
// Callback function 'fn' will be called each time a new message is received.
func (c *AppController) SubscribeCryptellationBacktestsAccountsListRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsAccountsListRequestMessage)) error {
	// Get channel path
	path := "cryptellation.backtests.accounts.list.request"

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "reception")

	// Check if there is already a subscription
	_, exists := c.subscriptions[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", extensions.ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			brokerMsg, open := <-sub.MessagesChannel()

			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then exit the function
			if !open && brokerMsg.IsUninitialized() {
				return
			}

			// Set broker message to context
			ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

			// Execute middlewares before handling the message
			if err := c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
				// Process message
				msg, err := newBacktestsAccountsListRequestMessageFromBrokerMessage(brokerMsg)
				if err != nil {
					return err
				}

				// Add correlation ID to context if it exists
				if id := msg.CorrelationID(); id != "" {
					ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, id)
				}

				// Execute the subscription function
				fn(ctx, msg)

				return nil
			}); err != nil {
				c.logger.Error(ctx, err.Error())
			}
		}
	}()

	// Add the cancel channel to the inside map
	c.subscriptions[path] = sub

	return nil
}

// UnsubscribeCryptellationBacktestsAccountsListRequest will unsubscribe messages from 'cryptellation.backtests.accounts.list.request' channel.
// A timeout can be set in context to avoid blocking operation, if needed.
func (c *AppController) UnsubscribeCryptellationBacktestsAccountsListRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.accounts.list.request"

	// Check if there subscribers for this channel
	sub, exists := c.subscriptions[path]
	if !exists {
		return
	}

	// Set context
	ctx = addAppContextValues(ctx, path)

	// Stop the subscription
	sub.Cancel(ctx)

	// Remove if from the subscribers
	delete(c.subscriptions, path)

	c.logger.Info(ctx, "Unsubscribed from channel")
} // SubscribeCryptellationBacktestsAdvanceRequest will subscribe to new messages from 'cryptellation.backtests.advance.request' channel.
// Callback function 'fn' will be called each time a new message is received.
func (c *AppController) SubscribeCryptellationBacktestsAdvanceRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsAdvanceRequestMessage)) error {
	// Get channel path
	path := "cryptellation.backtests.advance.request"

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "reception")

	// Check if there is already a subscription
	_, exists := c.subscriptions[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", extensions.ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			brokerMsg, open := <-sub.MessagesChannel()

			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then exit the function
			if !open && brokerMsg.IsUninitialized() {
				return
			}

			// Set broker message to context
			ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

			// Execute middlewares before handling the message
			if err := c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
				// Process message
				msg, err := newBacktestsAdvanceRequestMessageFromBrokerMessage(brokerMsg)
				if err != nil {
					return err
				}

				// Add correlation ID to context if it exists
				if id := msg.CorrelationID(); id != "" {
					ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, id)
				}

				// Execute the subscription function
				fn(ctx, msg)

				return nil
			}); err != nil {
				c.logger.Error(ctx, err.Error())
			}
		}
	}()

	// Add the cancel channel to the inside map
	c.subscriptions[path] = sub

	return nil
}

// UnsubscribeCryptellationBacktestsAdvanceRequest will unsubscribe messages from 'cryptellation.backtests.advance.request' channel.
// A timeout can be set in context to avoid blocking operation, if needed.
func (c *AppController) UnsubscribeCryptellationBacktestsAdvanceRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.advance.request"

	// Check if there subscribers for this channel
	sub, exists := c.subscriptions[path]
	if !exists {
		return
	}

	// Set context
	ctx = addAppContextValues(ctx, path)

	// Stop the subscription
	sub.Cancel(ctx)

	// Remove if from the subscribers
	delete(c.subscriptions, path)

	c.logger.Info(ctx, "Unsubscribed from channel")
} // SubscribeCryptellationBacktestsCreateRequest will subscribe to new messages from 'cryptellation.backtests.create.request' channel.
// Callback function 'fn' will be called each time a new message is received.
func (c *AppController) SubscribeCryptellationBacktestsCreateRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsCreateRequestMessage)) error {
	// Get channel path
	path := "cryptellation.backtests.create.request"

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "reception")

	// Check if there is already a subscription
	_, exists := c.subscriptions[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", extensions.ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			brokerMsg, open := <-sub.MessagesChannel()

			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then exit the function
			if !open && brokerMsg.IsUninitialized() {
				return
			}

			// Set broker message to context
			ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

			// Execute middlewares before handling the message
			if err := c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
				// Process message
				msg, err := newBacktestsCreateRequestMessageFromBrokerMessage(brokerMsg)
				if err != nil {
					return err
				}

				// Add correlation ID to context if it exists
				if id := msg.CorrelationID(); id != "" {
					ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, id)
				}

				// Execute the subscription function
				fn(ctx, msg)

				return nil
			}); err != nil {
				c.logger.Error(ctx, err.Error())
			}
		}
	}()

	// Add the cancel channel to the inside map
	c.subscriptions[path] = sub

	return nil
}

// UnsubscribeCryptellationBacktestsCreateRequest will unsubscribe messages from 'cryptellation.backtests.create.request' channel.
// A timeout can be set in context to avoid blocking operation, if needed.
func (c *AppController) UnsubscribeCryptellationBacktestsCreateRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.create.request"

	// Check if there subscribers for this channel
	sub, exists := c.subscriptions[path]
	if !exists {
		return
	}

	// Set context
	ctx = addAppContextValues(ctx, path)

	// Stop the subscription
	sub.Cancel(ctx)

	// Remove if from the subscribers
	delete(c.subscriptions, path)

	c.logger.Info(ctx, "Unsubscribed from channel")
} // SubscribeCryptellationBacktestsOrdersCreateRequest will subscribe to new messages from 'cryptellation.backtests.orders.create.request' channel.
// Callback function 'fn' will be called each time a new message is received.
func (c *AppController) SubscribeCryptellationBacktestsOrdersCreateRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsOrdersCreateRequestMessage)) error {
	// Get channel path
	path := "cryptellation.backtests.orders.create.request"

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "reception")

	// Check if there is already a subscription
	_, exists := c.subscriptions[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", extensions.ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			brokerMsg, open := <-sub.MessagesChannel()

			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then exit the function
			if !open && brokerMsg.IsUninitialized() {
				return
			}

			// Set broker message to context
			ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

			// Execute middlewares before handling the message
			if err := c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
				// Process message
				msg, err := newBacktestsOrdersCreateRequestMessageFromBrokerMessage(brokerMsg)
				if err != nil {
					return err
				}

				// Add correlation ID to context if it exists
				if id := msg.CorrelationID(); id != "" {
					ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, id)
				}

				// Execute the subscription function
				fn(ctx, msg)

				return nil
			}); err != nil {
				c.logger.Error(ctx, err.Error())
			}
		}
	}()

	// Add the cancel channel to the inside map
	c.subscriptions[path] = sub

	return nil
}

// UnsubscribeCryptellationBacktestsOrdersCreateRequest will unsubscribe messages from 'cryptellation.backtests.orders.create.request' channel.
// A timeout can be set in context to avoid blocking operation, if needed.
func (c *AppController) UnsubscribeCryptellationBacktestsOrdersCreateRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.orders.create.request"

	// Check if there subscribers for this channel
	sub, exists := c.subscriptions[path]
	if !exists {
		return
	}

	// Set context
	ctx = addAppContextValues(ctx, path)

	// Stop the subscription
	sub.Cancel(ctx)

	// Remove if from the subscribers
	delete(c.subscriptions, path)

	c.logger.Info(ctx, "Unsubscribed from channel")
} // SubscribeCryptellationBacktestsOrdersListRequest will subscribe to new messages from 'cryptellation.backtests.orders.list.request' channel.
// Callback function 'fn' will be called each time a new message is received.
func (c *AppController) SubscribeCryptellationBacktestsOrdersListRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsOrdersListRequestMessage)) error {
	// Get channel path
	path := "cryptellation.backtests.orders.list.request"

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "reception")

	// Check if there is already a subscription
	_, exists := c.subscriptions[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", extensions.ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			brokerMsg, open := <-sub.MessagesChannel()

			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then exit the function
			if !open && brokerMsg.IsUninitialized() {
				return
			}

			// Set broker message to context
			ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

			// Execute middlewares before handling the message
			if err := c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
				// Process message
				msg, err := newBacktestsOrdersListRequestMessageFromBrokerMessage(brokerMsg)
				if err != nil {
					return err
				}

				// Add correlation ID to context if it exists
				if id := msg.CorrelationID(); id != "" {
					ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, id)
				}

				// Execute the subscription function
				fn(ctx, msg)

				return nil
			}); err != nil {
				c.logger.Error(ctx, err.Error())
			}
		}
	}()

	// Add the cancel channel to the inside map
	c.subscriptions[path] = sub

	return nil
}

// UnsubscribeCryptellationBacktestsOrdersListRequest will unsubscribe messages from 'cryptellation.backtests.orders.list.request' channel.
// A timeout can be set in context to avoid blocking operation, if needed.
func (c *AppController) UnsubscribeCryptellationBacktestsOrdersListRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.orders.list.request"

	// Check if there subscribers for this channel
	sub, exists := c.subscriptions[path]
	if !exists {
		return
	}

	// Set context
	ctx = addAppContextValues(ctx, path)

	// Stop the subscription
	sub.Cancel(ctx)

	// Remove if from the subscribers
	delete(c.subscriptions, path)

	c.logger.Info(ctx, "Unsubscribed from channel")
} // SubscribeCryptellationBacktestsSubscribeRequest will subscribe to new messages from 'cryptellation.backtests.subscribe.request' channel.
// Callback function 'fn' will be called each time a new message is received.
func (c *AppController) SubscribeCryptellationBacktestsSubscribeRequest(ctx context.Context, fn func(ctx context.Context, msg BacktestsSubscribeRequestMessage)) error {
	// Get channel path
	path := "cryptellation.backtests.subscribe.request"

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "reception")

	// Check if there is already a subscription
	_, exists := c.subscriptions[path]
	if exists {
		err := fmt.Errorf("%w: %q channel is already subscribed", extensions.ErrAlreadySubscribedChannel, path)
		c.logger.Error(ctx, err.Error())
		return err
	}

	// Subscribe to broker channel
	sub, err := c.broker.Subscribe(ctx, path)
	if err != nil {
		c.logger.Error(ctx, err.Error())
		return err
	}
	c.logger.Info(ctx, "Subscribed to channel")

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for {
			// Wait for next message
			brokerMsg, open := <-sub.MessagesChannel()

			// If subscription is closed and there is no more message
			// (i.e. uninitialized message), then exit the function
			if !open && brokerMsg.IsUninitialized() {
				return
			}

			// Set broker message to context
			ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

			// Execute middlewares before handling the message
			if err := c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
				// Process message
				msg, err := newBacktestsSubscribeRequestMessageFromBrokerMessage(brokerMsg)
				if err != nil {
					return err
				}

				// Add correlation ID to context if it exists
				if id := msg.CorrelationID(); id != "" {
					ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, id)
				}

				// Execute the subscription function
				fn(ctx, msg)

				return nil
			}); err != nil {
				c.logger.Error(ctx, err.Error())
			}
		}
	}()

	// Add the cancel channel to the inside map
	c.subscriptions[path] = sub

	return nil
}

// UnsubscribeCryptellationBacktestsSubscribeRequest will unsubscribe messages from 'cryptellation.backtests.subscribe.request' channel.
// A timeout can be set in context to avoid blocking operation, if needed.
func (c *AppController) UnsubscribeCryptellationBacktestsSubscribeRequest(ctx context.Context) {
	// Get channel path
	path := "cryptellation.backtests.subscribe.request"

	// Check if there subscribers for this channel
	sub, exists := c.subscriptions[path]
	if !exists {
		return
	}

	// Set context
	ctx = addAppContextValues(ctx, path)

	// Stop the subscription
	sub.Cancel(ctx)

	// Remove if from the subscribers
	delete(c.subscriptions, path)

	c.logger.Info(ctx, "Unsubscribed from channel")
}

// PublishCryptellationBacktestsAccountsListResponse will publish messages to 'cryptellation.backtests.accounts.list.response' channel
func (c *AppController) PublishCryptellationBacktestsAccountsListResponse(ctx context.Context, msg BacktestsAccountsListResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.accounts.list.response"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Publish the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, path, brokerMsg)
	})
}

// PublishCryptellationBacktestsAdvanceResponse will publish messages to 'cryptellation.backtests.advance.response' channel
func (c *AppController) PublishCryptellationBacktestsAdvanceResponse(ctx context.Context, msg BacktestsAdvanceResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.advance.response"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Publish the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, path, brokerMsg)
	})
}

// PublishCryptellationBacktestsCreateResponse will publish messages to 'cryptellation.backtests.create.response' channel
func (c *AppController) PublishCryptellationBacktestsCreateResponse(ctx context.Context, msg BacktestsCreateResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.create.response"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Publish the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, path, brokerMsg)
	})
}

// PublishCryptellationBacktestsEventsID will publish messages to 'cryptellation.backtests.events.{id}' channel
func (c *AppController) PublishCryptellationBacktestsEventsID(ctx context.Context, params CryptellationBacktestsEventsIDParameters, msg BacktestsEventMessage) error {
	// Get channel path
	path := fmt.Sprintf("cryptellation.backtests.events.%v", params.ID)

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Publish the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, path, brokerMsg)
	})
}

// PublishCryptellationBacktestsOrdersCreateResponse will publish messages to 'cryptellation.backtests.orders.create.response' channel
func (c *AppController) PublishCryptellationBacktestsOrdersCreateResponse(ctx context.Context, msg BacktestsOrdersCreateResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.orders.create.response"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Publish the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, path, brokerMsg)
	})
}

// PublishCryptellationBacktestsOrdersListResponse will publish messages to 'cryptellation.backtests.orders.list.response' channel
func (c *AppController) PublishCryptellationBacktestsOrdersListResponse(ctx context.Context, msg BacktestsOrdersListResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.orders.list.response"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Publish the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, path, brokerMsg)
	})
}

// PublishCryptellationBacktestsSubscribeResponse will publish messages to 'cryptellation.backtests.subscribe.response' channel
func (c *AppController) PublishCryptellationBacktestsSubscribeResponse(ctx context.Context, msg BacktestsSubscribeResponseMessage) error {
	// Get channel path
	path := "cryptellation.backtests.subscribe.response"

	// Set correlation ID if it does not exist
	if id := msg.CorrelationID(); id == "" {
		msg.SetCorrelationID(uuid.New().String())
	}

	// Set context
	ctx = addAppContextValues(ctx, path)
	ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
	ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())

	// Convert to BrokerMessage
	brokerMsg, err := msg.toBrokerMessage()
	if err != nil {
		return err
	}

	// Set broker message to context
	ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

	// Publish the message on event-broker through middlewares
	return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
		return c.broker.Publish(ctx, path, brokerMsg)
	})
}
