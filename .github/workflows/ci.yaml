name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Run linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v6.5.0
        with:
          verb: call
          args: -m build/ci lint --source-dir=. stdout 
  
  check-generation:
    name: Check generation has been run
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v6.5.0
        with:
          verb: call
          args: -m build/ci check-generation --source-dir=. stdout

  unit-tests:
    name: Run unit tests
    needs: ["lint", "check-generation"]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v6.5.0
        with:
          verb: call
          args: -m build/ci unit-tests --source-dir=. stdout 

  # integration-tests:
  #   name: Run integration tests
  #   needs: ["unit-tests"]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - uses: actions/checkout@v4.1.1
  #     - name: Create a go.work file
  #       run: cp go.work.example go.work
  #     - name: Create a credentials file
  #       run: |
  #         echo "BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}" > ./.credentials.env
  #         echo "BINANCE_SECRET_KEY=${{ secrets.BINANCE_SECRET_KEY }}" >> ./.credentials.env
  #     - uses: dagger/dagger-for-github@v6.5.0
  #       with:
  #         verb: call
  #         args: -m build/ci integration-tests --source-dir=. --secrets-file=file:./.credentials.env stdout 

  # end-to-end-tests:
  #   name: Run end-to-end tests
  #   needs: ["integration-tests"]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - uses: actions/checkout@v4.1.1
  #     - name: Create a go.work file
  #       run: cp go.work.example go.work
  #     - name: Create a credentials file
  #       run: |
  #         echo "BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}" > ./.credentials.env
  #         echo "BINANCE_SECRET_KEY=${{ secrets.BINANCE_SECRET_KEY }}" >> ./.credentials.env
  #     - uses: dagger/dagger-for-github@v6.5.0
  #       with:
  #         verb: call
  #         args: -m build/ci end-to-end-tests --source-dir=. --secrets-file=file:./.credentials.env stdout 

  release:
    name: Release a new version
    permissions:
      contents: write
    needs: ["unit-tests"]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: docker/login-action@v3
        with:
          username: lerenn
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v6.5.0
        with:
          verb: call
          args: -m build/ci release --source-dir=. --ssh-private-key-file=env:SSH_PRIVATE_KEY
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  publish-docker-images:
    name: Publish Docker images
    permissions:
      contents: write
    needs: ["release"]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: docker/login-action@v3
        with:
          username: lerenn
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v6.5.0
        with:
          verb: call
          args: -m build/ci publish-docker-images --source-dir=. --ssh-private-key-file=env:SSH_PRIVATE_KEY
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  publish-helm-charts:
    name: Publish Helm Charts
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      github.ref == 'refs/heads/main' &&
      github.event.head_commit.message == 'chore: update Helm chart'
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: docker/login-action@v3
        with:
          username: lerenn
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v6.5.0
        with:
          verb: call
          args: -m build/ci publish-helm-charts --source-dir=. --ssh-private-key-file=env:SSH_PRIVATE_KEY
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
